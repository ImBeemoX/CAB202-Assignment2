   1               		.file	"usb_serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.usb_wait_in_ready,"ax",@progbits
  12               	usb_wait_in_ready:
  13               	.LFB17:
  14               		.file 1 "usb_serial.c"
   1:usb_serial.c  **** /* USB Serial Example for Teensy USB Development Board
   2:usb_serial.c  ****  * http://www.pjrc.com/teensy/usb_serial.html
   3:usb_serial.c  ****  * Copyright (c) 2008,2010,2011 PJRC.COM, LLC
   4:usb_serial.c  ****  *
   5:usb_serial.c  ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   6:usb_serial.c  ****  * of this software and associated documentation files (the "Software"), to deal
   7:usb_serial.c  ****  * in the Software without restriction, including without limitation the rights
   8:usb_serial.c  ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   9:usb_serial.c  ****  * copies of the Software, and to permit persons to whom the Software is
  10:usb_serial.c  ****  * furnished to do so, subject to the following conditions:
  11:usb_serial.c  ****  *
  12:usb_serial.c  ****  * The above copyright notice and this permission notice shall be included in
  13:usb_serial.c  ****  * all copies or substantial portions of the Software.
  14:usb_serial.c  ****  *
  15:usb_serial.c  ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:usb_serial.c  ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  17:usb_serial.c  ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  18:usb_serial.c  ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  19:usb_serial.c  ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  20:usb_serial.c  ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  21:usb_serial.c  ****  * THE SOFTWARE.
  22:usb_serial.c  ****  */
  23:usb_serial.c  **** 
  24:usb_serial.c  **** // Version 1.0: Initial Release
  25:usb_serial.c  **** // Version 1.1: support Teensy++
  26:usb_serial.c  **** // Version 1.2: fixed usb_serial_available
  27:usb_serial.c  **** // Version 1.3: added transmit bandwidth test
  28:usb_serial.c  **** // Version 1.4: added usb_serial_write
  29:usb_serial.c  **** // Version 1.5: add support for Teensy 2.0
  30:usb_serial.c  **** // Version 1.6: fix zero length packet bug
  31:usb_serial.c  **** // Version 1.7: fix usb_serial_set_control
  32:usb_serial.c  **** 
  33:usb_serial.c  **** #define USB_SERIAL_PRIVATE_INCLUDE
  34:usb_serial.c  **** #include "usb_serial.h"
  35:usb_serial.c  **** 
  36:usb_serial.c  **** 
  37:usb_serial.c  **** /**************************************************************************
  38:usb_serial.c  ****  *
  39:usb_serial.c  ****  *  Configurable Options
  40:usb_serial.c  ****  *
  41:usb_serial.c  ****  **************************************************************************/
  42:usb_serial.c  **** 
  43:usb_serial.c  **** // You can change these to give your code its own name.  On Windows,
  44:usb_serial.c  **** // these are only used before an INF file (driver install) is loaded.
  45:usb_serial.c  **** #define STR_MANUFACTURER	L"Your Name"
  46:usb_serial.c  **** #define STR_PRODUCT		L"USB Serial"
  47:usb_serial.c  **** 
  48:usb_serial.c  **** // All USB serial devices are supposed to have a serial number
  49:usb_serial.c  **** // (according to Microsoft).  On windows, a new COM port is created
  50:usb_serial.c  **** // for every unique serial/vendor/product number combination.  If
  51:usb_serial.c  **** // you program 2 identical boards with 2 different serial numbers
  52:usb_serial.c  **** // and they are assigned COM7 and COM8, each will always get the
  53:usb_serial.c  **** // same COM port number because Windows remembers serial numbers.
  54:usb_serial.c  **** //
  55:usb_serial.c  **** // On Mac OS-X, a device file is created automatically which
  56:usb_serial.c  **** // incorperates the serial number, eg, /dev/cu-usbmodem12341
  57:usb_serial.c  **** //
  58:usb_serial.c  **** // Linux by default ignores the serial number, and creates device
  59:usb_serial.c  **** // files named /dev/ttyACM0, /dev/ttyACM1... in the order connected.
  60:usb_serial.c  **** // Udev rules (in /etc/udev/rules.d) can define persistent device
  61:usb_serial.c  **** // names linked to this serial number, as well as permissions, owner
  62:usb_serial.c  **** // and group settings.
  63:usb_serial.c  **** #define STR_SERIAL_NUMBER	L"12345"
  64:usb_serial.c  **** 
  65:usb_serial.c  **** // Mac OS-X and Linux automatically load the correct drivers.  On
  66:usb_serial.c  **** // Windows, even though the driver is supplied by Microsoft, an
  67:usb_serial.c  **** // INF file is needed to load the driver.  These numbers need to
  68:usb_serial.c  **** // match the INF file.
  69:usb_serial.c  **** #define VENDOR_ID		0x16C0
  70:usb_serial.c  **** #define PRODUCT_ID		0x047A
  71:usb_serial.c  **** 
  72:usb_serial.c  **** // When you write data, it goes into a USB endpoint buffer, which
  73:usb_serial.c  **** // is transmitted to the PC when it becomes full, or after a timeout
  74:usb_serial.c  **** // with no more writes.  Even if you write in exactly packet-size
  75:usb_serial.c  **** // increments, this timeout is used to send a "zero length packet"
  76:usb_serial.c  **** // that tells the PC no more data is expected and it should pass
  77:usb_serial.c  **** // any buffered data to the application that may be waiting.  If
  78:usb_serial.c  **** // you want data sent immediately, call usb_serial_flush_output().
  79:usb_serial.c  **** #define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */
  80:usb_serial.c  **** 
  81:usb_serial.c  **** // If the PC is connected but not "listening", this is the length
  82:usb_serial.c  **** // of time before usb_serial_getchar() returns with an error.  This
  83:usb_serial.c  **** // is roughly equivilant to a real UART simply transmitting the
  84:usb_serial.c  **** // bits on a wire where nobody is listening, except you get an error
  85:usb_serial.c  **** // code which you can ignore for serial-like discard of data, or
  86:usb_serial.c  **** // use to know your data wasn't sent.
  87:usb_serial.c  **** #define TRANSMIT_TIMEOUT	25   /* in milliseconds */
  88:usb_serial.c  **** 
  89:usb_serial.c  **** // USB devices are supposed to implment a halt feature, which is
  90:usb_serial.c  **** // rarely (if ever) used.  If you comment this line out, the halt
  91:usb_serial.c  **** // code will be removed, saving 116 bytes of space (gcc 4.3.0).
  92:usb_serial.c  **** // This is not strictly USB compliant, but works with all major
  93:usb_serial.c  **** // operating systems.
  94:usb_serial.c  **** #define SUPPORT_ENDPOINT_HALT
  95:usb_serial.c  **** 
  96:usb_serial.c  **** 
  97:usb_serial.c  **** 
  98:usb_serial.c  **** /**************************************************************************
  99:usb_serial.c  ****  *
 100:usb_serial.c  ****  *  Endpoint Buffer Configuration
 101:usb_serial.c  ****  *
 102:usb_serial.c  ****  **************************************************************************/
 103:usb_serial.c  **** 
 104:usb_serial.c  **** // These buffer sizes are best for most applications, but perhaps if you
 105:usb_serial.c  **** // want more buffering on some endpoint at the expense of others, this
 106:usb_serial.c  **** // is where you can make such changes.  The AT90USB162 has only 176 bytes
 107:usb_serial.c  **** // of DPRAM (USB buffers) and only endpoints 3 & 4 can double buffer.
 108:usb_serial.c  **** 
 109:usb_serial.c  **** #define ENDPOINT0_SIZE		16
 110:usb_serial.c  **** #define CDC_ACM_ENDPOINT	2
 111:usb_serial.c  **** #define CDC_RX_ENDPOINT		3
 112:usb_serial.c  **** #define CDC_TX_ENDPOINT		4
 113:usb_serial.c  **** #if defined(__AVR_AT90USB162__)
 114:usb_serial.c  **** #define CDC_ACM_SIZE		16
 115:usb_serial.c  **** #define CDC_ACM_BUFFER		EP_SINGLE_BUFFER
 116:usb_serial.c  **** #define CDC_RX_SIZE		32
 117:usb_serial.c  **** #define CDC_RX_BUFFER 		EP_DOUBLE_BUFFER
 118:usb_serial.c  **** #define CDC_TX_SIZE		32
 119:usb_serial.c  **** #define CDC_TX_BUFFER		EP_DOUBLE_BUFFER
 120:usb_serial.c  **** #else
 121:usb_serial.c  **** #define CDC_ACM_SIZE		16
 122:usb_serial.c  **** #define CDC_ACM_BUFFER		EP_SINGLE_BUFFER
 123:usb_serial.c  **** #define CDC_RX_SIZE		64
 124:usb_serial.c  **** #define CDC_RX_BUFFER 		EP_DOUBLE_BUFFER
 125:usb_serial.c  **** #define CDC_TX_SIZE		64
 126:usb_serial.c  **** #define CDC_TX_BUFFER		EP_DOUBLE_BUFFER
 127:usb_serial.c  **** #endif
 128:usb_serial.c  **** 
 129:usb_serial.c  **** static const uint8_t PROGMEM endpoint_config_table[] = {
 130:usb_serial.c  **** 	0,
 131:usb_serial.c  **** 	1, EP_TYPE_INTERRUPT_IN,  EP_SIZE(CDC_ACM_SIZE) | CDC_ACM_BUFFER,
 132:usb_serial.c  **** 	1, EP_TYPE_BULK_OUT,      EP_SIZE(CDC_RX_SIZE) | CDC_RX_BUFFER,
 133:usb_serial.c  **** 	1, EP_TYPE_BULK_IN,       EP_SIZE(CDC_TX_SIZE) | CDC_TX_BUFFER
 134:usb_serial.c  **** };
 135:usb_serial.c  **** 
 136:usb_serial.c  **** 
 137:usb_serial.c  **** /**************************************************************************
 138:usb_serial.c  ****  *
 139:usb_serial.c  ****  *  Descriptor Data
 140:usb_serial.c  ****  *
 141:usb_serial.c  ****  **************************************************************************/
 142:usb_serial.c  **** 
 143:usb_serial.c  **** // Descriptors are the data that your computer reads when it auto-detects
 144:usb_serial.c  **** // this USB device (called "enumeration" in USB lingo).  The most commonly
 145:usb_serial.c  **** // changed items are editable at the top of this file.  Changing things
 146:usb_serial.c  **** // in here should only be done by those who've read chapter 9 of the USB
 147:usb_serial.c  **** // spec and relevant portions of any USB class specifications!
 148:usb_serial.c  **** 
 149:usb_serial.c  **** static const uint8_t PROGMEM device_descriptor[] = {
 150:usb_serial.c  **** 	18,					// bLength
 151:usb_serial.c  **** 	1,					// bDescriptorType
 152:usb_serial.c  **** 	0x00, 0x02,				// bcdUSB
 153:usb_serial.c  **** 	2,					// bDeviceClass
 154:usb_serial.c  **** 	0,					// bDeviceSubClass
 155:usb_serial.c  **** 	0,					// bDeviceProtocol
 156:usb_serial.c  **** 	ENDPOINT0_SIZE,				// bMaxPacketSize0
 157:usb_serial.c  **** 	LSB(VENDOR_ID), MSB(VENDOR_ID),		// idVendor
 158:usb_serial.c  **** 	LSB(PRODUCT_ID), MSB(PRODUCT_ID),	// idProduct
 159:usb_serial.c  **** 	0x00, 0x01,				// bcdDevice
 160:usb_serial.c  **** 	1,					// iManufacturer
 161:usb_serial.c  **** 	2,					// iProduct
 162:usb_serial.c  **** 	3,					// iSerialNumber
 163:usb_serial.c  **** 	1					// bNumConfigurations
 164:usb_serial.c  **** };
 165:usb_serial.c  **** 
 166:usb_serial.c  **** #define CONFIG1_DESC_SIZE (9+9+5+5+4+5+7+9+7+7)
 167:usb_serial.c  **** static const uint8_t PROGMEM config1_descriptor[CONFIG1_DESC_SIZE] = {
 168:usb_serial.c  **** 	// configuration descriptor, USB spec 9.6.3, page 264-266, Table 9-10
 169:usb_serial.c  **** 	9, 					// bLength;
 170:usb_serial.c  **** 	2,					// bDescriptorType;
 171:usb_serial.c  **** 	LSB(CONFIG1_DESC_SIZE),			// wTotalLength
 172:usb_serial.c  **** 	MSB(CONFIG1_DESC_SIZE),
 173:usb_serial.c  **** 	2,					// bNumInterfaces
 174:usb_serial.c  **** 	1,					// bConfigurationValue
 175:usb_serial.c  **** 	0,					// iConfiguration
 176:usb_serial.c  **** 	0xC0,					// bmAttributes
 177:usb_serial.c  **** 	50,					// bMaxPower
 178:usb_serial.c  **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 179:usb_serial.c  **** 	9,					// bLength
 180:usb_serial.c  **** 	4,					// bDescriptorType
 181:usb_serial.c  **** 	0,					// bInterfaceNumber
 182:usb_serial.c  **** 	0,					// bAlternateSetting
 183:usb_serial.c  **** 	1,					// bNumEndpoints
 184:usb_serial.c  **** 	0x02,					// bInterfaceClass
 185:usb_serial.c  **** 	0x02,					// bInterfaceSubClass
 186:usb_serial.c  **** 	0x01,					// bInterfaceProtocol
 187:usb_serial.c  **** 	0,					// iInterface
 188:usb_serial.c  **** 	// CDC Header Functional Descriptor, CDC Spec 5.2.3.1, Table 26
 189:usb_serial.c  **** 	5,					// bFunctionLength
 190:usb_serial.c  **** 	0x24,					// bDescriptorType
 191:usb_serial.c  **** 	0x00,					// bDescriptorSubtype
 192:usb_serial.c  **** 	0x10, 0x01,				// bcdCDC
 193:usb_serial.c  **** 	// Call Management Functional Descriptor, CDC Spec 5.2.3.2, Table 27
 194:usb_serial.c  **** 	5,					// bFunctionLength
 195:usb_serial.c  **** 	0x24,					// bDescriptorType
 196:usb_serial.c  **** 	0x01,					// bDescriptorSubtype
 197:usb_serial.c  **** 	0x01,					// bmCapabilities
 198:usb_serial.c  **** 	1,					// bDataInterface
 199:usb_serial.c  **** 	// Abstract Control Management Functional Descriptor, CDC Spec 5.2.3.3, Table 28
 200:usb_serial.c  **** 	4,					// bFunctionLength
 201:usb_serial.c  **** 	0x24,					// bDescriptorType
 202:usb_serial.c  **** 	0x02,					// bDescriptorSubtype
 203:usb_serial.c  **** 	0x06,					// bmCapabilities
 204:usb_serial.c  **** 	// Union Functional Descriptor, CDC Spec 5.2.3.8, Table 33
 205:usb_serial.c  **** 	5,					// bFunctionLength
 206:usb_serial.c  **** 	0x24,					// bDescriptorType
 207:usb_serial.c  **** 	0x06,					// bDescriptorSubtype
 208:usb_serial.c  **** 	0,					// bMasterInterface
 209:usb_serial.c  **** 	1,					// bSlaveInterface0
 210:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 211:usb_serial.c  **** 	7,					// bLength
 212:usb_serial.c  **** 	5,					// bDescriptorType
 213:usb_serial.c  **** 	CDC_ACM_ENDPOINT | 0x80,		// bEndpointAddress
 214:usb_serial.c  **** 	0x03,					// bmAttributes (0x03=intr)
 215:usb_serial.c  **** 	CDC_ACM_SIZE, 0,			// wMaxPacketSize
 216:usb_serial.c  **** 	64,					// bInterval
 217:usb_serial.c  **** 	// interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
 218:usb_serial.c  **** 	9,					// bLength
 219:usb_serial.c  **** 	4,					// bDescriptorType
 220:usb_serial.c  **** 	1,					// bInterfaceNumber
 221:usb_serial.c  **** 	0,					// bAlternateSetting
 222:usb_serial.c  **** 	2,					// bNumEndpoints
 223:usb_serial.c  **** 	0x0A,					// bInterfaceClass
 224:usb_serial.c  **** 	0x00,					// bInterfaceSubClass
 225:usb_serial.c  **** 	0x00,					// bInterfaceProtocol
 226:usb_serial.c  **** 	0,					// iInterface
 227:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 228:usb_serial.c  **** 	7,					// bLength
 229:usb_serial.c  **** 	5,					// bDescriptorType
 230:usb_serial.c  **** 	CDC_RX_ENDPOINT,			// bEndpointAddress
 231:usb_serial.c  **** 	0x02,					// bmAttributes (0x02=bulk)
 232:usb_serial.c  **** 	CDC_RX_SIZE, 0,				// wMaxPacketSize
 233:usb_serial.c  **** 	0,					// bInterval
 234:usb_serial.c  **** 	// endpoint descriptor, USB spec 9.6.6, page 269-271, Table 9-13
 235:usb_serial.c  **** 	7,					// bLength
 236:usb_serial.c  **** 	5,					// bDescriptorType
 237:usb_serial.c  **** 	CDC_TX_ENDPOINT | 0x80,			// bEndpointAddress
 238:usb_serial.c  **** 	0x02,					// bmAttributes (0x02=bulk)
 239:usb_serial.c  **** 	CDC_TX_SIZE, 0,				// wMaxPacketSize
 240:usb_serial.c  **** 	0					// bInterval
 241:usb_serial.c  **** };
 242:usb_serial.c  **** 
 243:usb_serial.c  **** // If you're desperate for a little extra code memory, these strings
 244:usb_serial.c  **** // can be completely removed if iManufacturer, iProduct, iSerialNumber
 245:usb_serial.c  **** // in the device desciptor are changed to zeros.
 246:usb_serial.c  **** struct usb_string_descriptor_struct {
 247:usb_serial.c  **** 	uint8_t bLength;
 248:usb_serial.c  **** 	uint8_t bDescriptorType;
 249:usb_serial.c  **** 	int16_t wString[];
 250:usb_serial.c  **** };
 251:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string0 = {
 252:usb_serial.c  **** 	4,
 253:usb_serial.c  **** 	3,
 254:usb_serial.c  **** 	{0x0409}
 255:usb_serial.c  **** };
 256:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string1 = {
 257:usb_serial.c  **** 	sizeof(STR_MANUFACTURER),
 258:usb_serial.c  **** 	3,
 259:usb_serial.c  **** 	STR_MANUFACTURER
 260:usb_serial.c  **** };
 261:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string2 = {
 262:usb_serial.c  **** 	sizeof(STR_PRODUCT),
 263:usb_serial.c  **** 	3,
 264:usb_serial.c  **** 	STR_PRODUCT
 265:usb_serial.c  **** };
 266:usb_serial.c  **** static const struct usb_string_descriptor_struct PROGMEM string3 = {
 267:usb_serial.c  **** 	sizeof(STR_SERIAL_NUMBER),
 268:usb_serial.c  **** 	3,
 269:usb_serial.c  **** 	STR_SERIAL_NUMBER
 270:usb_serial.c  **** };
 271:usb_serial.c  **** 
 272:usb_serial.c  **** // This table defines which descriptor data is sent for each specific
 273:usb_serial.c  **** // request from the host (in wValue and wIndex).
 274:usb_serial.c  **** static const struct descriptor_list_struct {
 275:usb_serial.c  **** 	uint16_t	wValue;
 276:usb_serial.c  **** 	uint16_t	wIndex;
 277:usb_serial.c  **** 	const uint8_t	*addr;
 278:usb_serial.c  **** 	uint8_t		length;
 279:usb_serial.c  **** } PROGMEM descriptor_list[] = {
 280:usb_serial.c  **** 	{0x0100, 0x0000, device_descriptor, sizeof(device_descriptor)},
 281:usb_serial.c  **** 	{0x0200, 0x0000, config1_descriptor, sizeof(config1_descriptor)},
 282:usb_serial.c  **** 	{0x0300, 0x0000, (const uint8_t *)&string0, 4},
 283:usb_serial.c  **** 	{0x0301, 0x0409, (const uint8_t *)&string1, sizeof(STR_MANUFACTURER)},
 284:usb_serial.c  **** 	{0x0302, 0x0409, (const uint8_t *)&string2, sizeof(STR_PRODUCT)},
 285:usb_serial.c  **** 	{0x0303, 0x0409, (const uint8_t *)&string3, sizeof(STR_SERIAL_NUMBER)}
 286:usb_serial.c  **** };
 287:usb_serial.c  **** #define NUM_DESC_LIST (sizeof(descriptor_list)/sizeof(struct descriptor_list_struct))
 288:usb_serial.c  **** 
 289:usb_serial.c  **** 
 290:usb_serial.c  **** /**************************************************************************
 291:usb_serial.c  ****  *
 292:usb_serial.c  ****  *  Variables - these are the only non-stack RAM usage
 293:usb_serial.c  ****  *
 294:usb_serial.c  ****  **************************************************************************/
 295:usb_serial.c  **** 
 296:usb_serial.c  **** // zero when we are not configured, non-zero when enumerated
 297:usb_serial.c  **** static volatile uint8_t usb_configuration=0;
 298:usb_serial.c  **** 
 299:usb_serial.c  **** // the time remaining before we transmit any partially full
 300:usb_serial.c  **** // packet, or send a zero length packet.
 301:usb_serial.c  **** static volatile uint8_t transmit_flush_timer=0;
 302:usb_serial.c  **** static uint8_t transmit_previous_timeout=0;
 303:usb_serial.c  **** 
 304:usb_serial.c  **** // serial port settings (baud rate, control signals, etc) set
 305:usb_serial.c  **** // by the PC.  These are ignored, but kept in RAM.
 306:usb_serial.c  **** static uint8_t cdc_line_coding[7]={0x00, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x08};
 307:usb_serial.c  **** static uint8_t cdc_line_rtsdtr=0;
 308:usb_serial.c  **** 
 309:usb_serial.c  **** 
 310:usb_serial.c  **** /**************************************************************************
 311:usb_serial.c  ****  *
 312:usb_serial.c  ****  *  Public Functions - these are the API intended for the user
 313:usb_serial.c  ****  *
 314:usb_serial.c  ****  **************************************************************************/
 315:usb_serial.c  **** 
 316:usb_serial.c  **** // initialize USB serial
 317:usb_serial.c  **** void usb_init(void)
 318:usb_serial.c  **** {
 319:usb_serial.c  **** 	HW_CONFIG();
 320:usb_serial.c  ****         USB_FREEZE();				// enable USB
 321:usb_serial.c  ****         PLL_CONFIG();				// config PLL, 16 MHz xtal
 322:usb_serial.c  ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 323:usb_serial.c  ****         USB_CONFIG();				// start USB clock
 324:usb_serial.c  ****         UDCON = 0;				// enable attach resistor
 325:usb_serial.c  **** 	usb_configuration = 0;
 326:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
 327:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
 328:usb_serial.c  **** 	sei();
 329:usb_serial.c  **** }
 330:usb_serial.c  **** 
 331:usb_serial.c  **** // return 0 if the USB is not configured, or the configuration
 332:usb_serial.c  **** // number selected by the HOST
 333:usb_serial.c  **** uint8_t usb_configured(void)
 334:usb_serial.c  **** {
 335:usb_serial.c  **** 	return usb_configuration;
 336:usb_serial.c  **** }
 337:usb_serial.c  **** 
 338:usb_serial.c  **** // get the next character, or -1 if nothing received
 339:usb_serial.c  **** int16_t usb_serial_getchar(void)
 340:usb_serial.c  **** {
 341:usb_serial.c  **** 	uint8_t c, intr_state;
 342:usb_serial.c  **** 
 343:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 344:usb_serial.c  **** 	// used from the main program or interrupt context,
 345:usb_serial.c  **** 	// even both in the same program!
 346:usb_serial.c  **** 	intr_state = SREG;
 347:usb_serial.c  **** 	cli();
 348:usb_serial.c  **** 	if (!usb_configuration) {
 349:usb_serial.c  **** 		SREG = intr_state;
 350:usb_serial.c  **** 		return -1;
 351:usb_serial.c  **** 	}
 352:usb_serial.c  **** 	UENUM = CDC_RX_ENDPOINT;
 353:usb_serial.c  **** 	retry:
 354:usb_serial.c  **** 	c = UEINTX;
 355:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 356:usb_serial.c  **** 		// no data in buffer
 357:usb_serial.c  **** 		if (c & (1<<RXOUTI)) {
 358:usb_serial.c  **** 			UEINTX = 0x6B;
 359:usb_serial.c  **** 			goto retry;
 360:usb_serial.c  **** 		}
 361:usb_serial.c  **** 		SREG = intr_state;
 362:usb_serial.c  **** 		return -1;
 363:usb_serial.c  **** 	}
 364:usb_serial.c  **** 	// take one byte out of the buffer
 365:usb_serial.c  **** 	c = UEDATX;
 366:usb_serial.c  **** 	// if buffer completely used, release it
 367:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 368:usb_serial.c  **** 	SREG = intr_state;
 369:usb_serial.c  **** 	return c;
 370:usb_serial.c  **** }
 371:usb_serial.c  **** 
 372:usb_serial.c  **** // number of bytes available in the receive buffer
 373:usb_serial.c  **** uint8_t usb_serial_available(void)
 374:usb_serial.c  **** {
 375:usb_serial.c  **** 	uint8_t n=0, i, intr_state;
 376:usb_serial.c  **** 
 377:usb_serial.c  **** 	intr_state = SREG;
 378:usb_serial.c  **** 	cli();
 379:usb_serial.c  **** 	if (usb_configuration) {
 380:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 381:usb_serial.c  **** 		n = UEBCLX;
 382:usb_serial.c  **** 		if (!n) {
 383:usb_serial.c  **** 			i = UEINTX;
 384:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 385:usb_serial.c  **** 		}
 386:usb_serial.c  **** 	}
 387:usb_serial.c  **** 	SREG = intr_state;
 388:usb_serial.c  **** 	return n;
 389:usb_serial.c  **** }
 390:usb_serial.c  **** 
 391:usb_serial.c  **** // discard any buffered input
 392:usb_serial.c  **** void usb_serial_flush_input(void)
 393:usb_serial.c  **** {
 394:usb_serial.c  **** 	uint8_t intr_state;
 395:usb_serial.c  **** 
 396:usb_serial.c  **** 	if (usb_configuration) {
 397:usb_serial.c  **** 		intr_state = SREG;
 398:usb_serial.c  **** 		cli();
 399:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 400:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 401:usb_serial.c  **** 			UEINTX = 0x6B;
 402:usb_serial.c  **** 		}
 403:usb_serial.c  **** 		SREG = intr_state;
 404:usb_serial.c  **** 	}
 405:usb_serial.c  **** }
 406:usb_serial.c  **** 
 407:usb_serial.c  **** // transmit a character.  0 returned on success, -1 on error
 408:usb_serial.c  **** int8_t usb_serial_putchar(uint8_t c)
 409:usb_serial.c  **** {
 410:usb_serial.c  **** 	uint8_t timeout, intr_state;
 411:usb_serial.c  **** 
 412:usb_serial.c  **** 	// if we're not online (enumerated and configured), error
 413:usb_serial.c  **** 	if (!usb_configuration) return -1;
 414:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 415:usb_serial.c  **** 	// used from the main program or interrupt context,
 416:usb_serial.c  **** 	// even both in the same program!
 417:usb_serial.c  **** 	intr_state = SREG;
 418:usb_serial.c  **** 	cli();
 419:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 420:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 421:usb_serial.c  **** 	if (transmit_previous_timeout) {
 422:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 423:usb_serial.c  **** 			SREG = intr_state;
 424:usb_serial.c  **** 			return -1;
 425:usb_serial.c  **** 		}
 426:usb_serial.c  **** 		transmit_previous_timeout = 0;
 427:usb_serial.c  **** 	}
 428:usb_serial.c  **** 	// wait for the FIFO to be ready to accept data
 429:usb_serial.c  **** 	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 430:usb_serial.c  **** 	while (1) {
 431:usb_serial.c  **** 		// are we ready to transmit?
 432:usb_serial.c  **** 		if (UEINTX & (1<<RWAL)) break;
 433:usb_serial.c  **** 		SREG = intr_state;
 434:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 435:usb_serial.c  **** 		// is not running an application that is listening
 436:usb_serial.c  **** 		if (UDFNUML == timeout) {
 437:usb_serial.c  **** 			transmit_previous_timeout = 1;
 438:usb_serial.c  **** 			return -1;
 439:usb_serial.c  **** 		}
 440:usb_serial.c  **** 		// has the USB gone offline?
 441:usb_serial.c  **** 		if (!usb_configuration) return -1;
 442:usb_serial.c  **** 		// get ready to try checking again
 443:usb_serial.c  **** 		intr_state = SREG;
 444:usb_serial.c  **** 		cli();
 445:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 446:usb_serial.c  **** 	}
 447:usb_serial.c  **** 	// actually write the byte into the FIFO
 448:usb_serial.c  **** 	UEDATX = c;
 449:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 450:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 451:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 452:usb_serial.c  **** 	SREG = intr_state;
 453:usb_serial.c  **** 	return 0;
 454:usb_serial.c  **** }
 455:usb_serial.c  **** 
 456:usb_serial.c  **** 
 457:usb_serial.c  **** // transmit a character, but do not wait if the buffer is full,
 458:usb_serial.c  **** //   0 returned on success, -1 on buffer full or error
 459:usb_serial.c  **** int8_t usb_serial_putchar_nowait(uint8_t c)
 460:usb_serial.c  **** {
 461:usb_serial.c  **** 	uint8_t intr_state;
 462:usb_serial.c  **** 
 463:usb_serial.c  **** 	if (!usb_configuration) return -1;
 464:usb_serial.c  **** 	intr_state = SREG;
 465:usb_serial.c  **** 	cli();
 466:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 467:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 468:usb_serial.c  **** 		// buffer is full
 469:usb_serial.c  **** 		SREG = intr_state;
 470:usb_serial.c  **** 		return -1;
 471:usb_serial.c  **** 	}
 472:usb_serial.c  **** 	// actually write the byte into the FIFO
 473:usb_serial.c  **** 	UEDATX = c;
 474:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 475:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 476:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 477:usb_serial.c  **** 	SREG = intr_state;
 478:usb_serial.c  **** 	return 0;
 479:usb_serial.c  **** }
 480:usb_serial.c  **** 
 481:usb_serial.c  **** // transmit a buffer.
 482:usb_serial.c  **** //  0 returned on success, -1 on error
 483:usb_serial.c  **** // This function is optimized for speed!  Each call takes approx 6.1 us overhead
 484:usb_serial.c  **** // plus 0.25 us per byte.  12 Mbit/sec USB has 8.67 us per-packet overhead and
 485:usb_serial.c  **** // takes 0.67 us per byte.  If called with 64 byte packet-size blocks, this function
 486:usb_serial.c  **** // can transmit at full USB speed using 43% CPU time.  The maximum theoretical speed
 487:usb_serial.c  **** // is 19 packets per USB frame, or 1216 kbytes/sec.  However, bulk endpoints have the
 488:usb_serial.c  **** // lowest priority, so any other USB devices will likely reduce the speed.  Speed
 489:usb_serial.c  **** // can also be limited by how quickly the PC-based software reads data, as the host
 490:usb_serial.c  **** // controller in the PC will not allocate bandwitdh without a pending read request.
 491:usb_serial.c  **** // (thanks to Victor Suarez for testing and feedback and initial code)
 492:usb_serial.c  **** 
 493:usb_serial.c  **** int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
 494:usb_serial.c  **** {
 495:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 496:usb_serial.c  **** 
 497:usb_serial.c  **** 	// if we're not online (enumerated and configured), error
 498:usb_serial.c  **** 	if (!usb_configuration) return -1;
 499:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 500:usb_serial.c  **** 	// used from the main program or interrupt context,
 501:usb_serial.c  **** 	// even both in the same program!
 502:usb_serial.c  **** 	intr_state = SREG;
 503:usb_serial.c  **** 	cli();
 504:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 505:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 506:usb_serial.c  **** 	if (transmit_previous_timeout) {
 507:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 508:usb_serial.c  **** 			SREG = intr_state;
 509:usb_serial.c  **** 			return -1;
 510:usb_serial.c  **** 		}
 511:usb_serial.c  **** 		transmit_previous_timeout = 0;
 512:usb_serial.c  **** 	}
 513:usb_serial.c  **** 	// each iteration of this loop transmits a packet
 514:usb_serial.c  **** 	while (size) {
 515:usb_serial.c  **** 		// wait for the FIFO to be ready to accept data
 516:usb_serial.c  **** 		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 517:usb_serial.c  **** 		while (1) {
 518:usb_serial.c  **** 			// are we ready to transmit?
 519:usb_serial.c  **** 			if (UEINTX & (1<<RWAL)) break;
 520:usb_serial.c  **** 			SREG = intr_state;
 521:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 522:usb_serial.c  **** 			// is not running an application that is listening
 523:usb_serial.c  **** 			if (UDFNUML == timeout) {
 524:usb_serial.c  **** 				transmit_previous_timeout = 1;
 525:usb_serial.c  **** 				return -1;
 526:usb_serial.c  **** 			}
 527:usb_serial.c  **** 			// has the USB gone offline?
 528:usb_serial.c  **** 			if (!usb_configuration) return -1;
 529:usb_serial.c  **** 			// get ready to try checking again
 530:usb_serial.c  **** 			intr_state = SREG;
 531:usb_serial.c  **** 			cli();
 532:usb_serial.c  **** 			UENUM = CDC_TX_ENDPOINT;
 533:usb_serial.c  **** 		}
 534:usb_serial.c  **** 
 535:usb_serial.c  **** 		// compute how many bytes will fit into the next packet
 536:usb_serial.c  **** 		write_size = CDC_TX_SIZE - UEBCLX;
 537:usb_serial.c  **** 		if (write_size > size) write_size = size;
 538:usb_serial.c  **** 		size -= write_size;
 539:usb_serial.c  **** 
 540:usb_serial.c  **** 		// write the packet
 541:usb_serial.c  **** 		switch (write_size) {
 542:usb_serial.c  **** 			#if (CDC_TX_SIZE == 64)
 543:usb_serial.c  **** 			case 64: UEDATX = *buffer++;
 544:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 545:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 546:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 547:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 548:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 549:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 550:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 551:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 552:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 553:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 554:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 555:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 556:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 557:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 558:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 559:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 560:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 561:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 562:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 563:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 564:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 565:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 566:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 567:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 568:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 569:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 570:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 571:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 572:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 573:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 574:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 575:usb_serial.c  **** 			#endif
 576:usb_serial.c  **** 			#if (CDC_TX_SIZE >= 32)
 577:usb_serial.c  **** 			case 32: UEDATX = *buffer++;
 578:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 579:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 580:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 581:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 582:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 583:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 584:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 585:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 586:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 587:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 588:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 589:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 590:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 591:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 592:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 593:usb_serial.c  **** 			#endif
 594:usb_serial.c  **** 			#if (CDC_TX_SIZE >= 16)
 595:usb_serial.c  **** 			case 16: UEDATX = *buffer++;
 596:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 597:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 598:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 599:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 600:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 601:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 602:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 603:usb_serial.c  **** 			#endif
 604:usb_serial.c  **** 			case  8: UEDATX = *buffer++;
 605:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 606:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 607:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 608:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 609:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 610:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 611:usb_serial.c  **** 			default:
 612:usb_serial.c  **** 			case  1: UEDATX = *buffer++;
 613:usb_serial.c  **** 			case  0: break;
 614:usb_serial.c  **** 		}
 615:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 616:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 617:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 618:usb_serial.c  **** 		SREG = intr_state;
 619:usb_serial.c  **** 	}
 620:usb_serial.c  **** 	return 0;
 621:usb_serial.c  **** }
 622:usb_serial.c  **** 
 623:usb_serial.c  **** 
 624:usb_serial.c  **** // immediately transmit any buffered output.
 625:usb_serial.c  **** // This doesn't actually transmit the data - that is impossible!
 626:usb_serial.c  **** // USB devices only transmit when the host allows, so the best
 627:usb_serial.c  **** // we can do is release the FIFO buffer for when the host wants it
 628:usb_serial.c  **** void usb_serial_flush_output(void)
 629:usb_serial.c  **** {
 630:usb_serial.c  **** 	uint8_t intr_state;
 631:usb_serial.c  **** 
 632:usb_serial.c  **** 	intr_state = SREG;
 633:usb_serial.c  **** 	cli();
 634:usb_serial.c  **** 	if (transmit_flush_timer) {
 635:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 636:usb_serial.c  **** 		UEINTX = 0x3A;
 637:usb_serial.c  **** 		transmit_flush_timer = 0;
 638:usb_serial.c  **** 	}
 639:usb_serial.c  **** 	SREG = intr_state;
 640:usb_serial.c  **** }
 641:usb_serial.c  **** 
 642:usb_serial.c  **** // functions to read the various async serial settings.  These
 643:usb_serial.c  **** // aren't actually used by USB at all (communication is always
 644:usb_serial.c  **** // at full USB speed), but they are set by the host so we can
 645:usb_serial.c  **** // set them properly if we're converting the USB to a real serial
 646:usb_serial.c  **** // communication
 647:usb_serial.c  **** uint32_t usb_serial_get_baud(void)
 648:usb_serial.c  **** {
 649:usb_serial.c  **** 	return *(uint32_t *)cdc_line_coding;
 650:usb_serial.c  **** }
 651:usb_serial.c  **** uint8_t usb_serial_get_stopbits(void)
 652:usb_serial.c  **** {
 653:usb_serial.c  **** 	return cdc_line_coding[4];
 654:usb_serial.c  **** }
 655:usb_serial.c  **** uint8_t usb_serial_get_paritytype(void)
 656:usb_serial.c  **** {
 657:usb_serial.c  **** 	return cdc_line_coding[5];
 658:usb_serial.c  **** }
 659:usb_serial.c  **** uint8_t usb_serial_get_numbits(void)
 660:usb_serial.c  **** {
 661:usb_serial.c  **** 	return cdc_line_coding[6];
 662:usb_serial.c  **** }
 663:usb_serial.c  **** uint8_t usb_serial_get_control(void)
 664:usb_serial.c  **** {
 665:usb_serial.c  **** 	return cdc_line_rtsdtr;
 666:usb_serial.c  **** }
 667:usb_serial.c  **** // write the control signals, DCD, DSR, RI, etc
 668:usb_serial.c  **** // There is no CTS signal.  If software on the host has transmitted
 669:usb_serial.c  **** // data to you but you haven't been calling the getchar function,
 670:usb_serial.c  **** // it remains buffered (either here or on the host) and can not be
 671:usb_serial.c  **** // lost because you weren't listening at the right time, like it
 672:usb_serial.c  **** // would in real serial communication.
 673:usb_serial.c  **** int8_t usb_serial_set_control(uint8_t signals)
 674:usb_serial.c  **** {
 675:usb_serial.c  **** 	uint8_t intr_state;
 676:usb_serial.c  **** 
 677:usb_serial.c  **** 	intr_state = SREG;
 678:usb_serial.c  **** 	cli();
 679:usb_serial.c  **** 	if (!usb_configuration) {
 680:usb_serial.c  **** 		// we're not enumerated/configured
 681:usb_serial.c  **** 		SREG = intr_state;
 682:usb_serial.c  **** 		return -1;
 683:usb_serial.c  **** 	}
 684:usb_serial.c  **** 
 685:usb_serial.c  **** 	UENUM = CDC_ACM_ENDPOINT;
 686:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 687:usb_serial.c  **** 		// unable to write
 688:usb_serial.c  **** 		// TODO; should this try to abort the previously
 689:usb_serial.c  **** 		// buffered message??
 690:usb_serial.c  **** 		SREG = intr_state;
 691:usb_serial.c  **** 		return -1;
 692:usb_serial.c  **** 	}
 693:usb_serial.c  **** 	UEDATX = 0xA1;
 694:usb_serial.c  **** 	UEDATX = 0x20;
 695:usb_serial.c  **** 	UEDATX = 0;
 696:usb_serial.c  **** 	UEDATX = 0;
 697:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 698:usb_serial.c  **** 	UEDATX = 0;
 699:usb_serial.c  **** 	UEDATX = 1;
 700:usb_serial.c  **** 	UEDATX = 0;
 701:usb_serial.c  **** 	UEDATX = signals;
 702:usb_serial.c  **** 	UEINTX = 0x3A;
 703:usb_serial.c  **** 	SREG = intr_state;
 704:usb_serial.c  **** 	return 0;
 705:usb_serial.c  **** }
 706:usb_serial.c  **** 
 707:usb_serial.c  **** 
 708:usb_serial.c  **** 
 709:usb_serial.c  **** /**************************************************************************
 710:usb_serial.c  ****  *
 711:usb_serial.c  ****  *  Private Functions - not intended for general user consumption....
 712:usb_serial.c  ****  *
 713:usb_serial.c  ****  **************************************************************************/
 714:usb_serial.c  **** 
 715:usb_serial.c  **** 
 716:usb_serial.c  **** // USB Device Interrupt - handle all device-level events
 717:usb_serial.c  **** // the transmit buffer flushing is triggered by the start of frame
 718:usb_serial.c  **** //
 719:usb_serial.c  **** ISR(USB_GEN_vect)
 720:usb_serial.c  **** {
 721:usb_serial.c  **** 	uint8_t intbits, t;
 722:usb_serial.c  **** 
 723:usb_serial.c  ****         intbits = UDINT;
 724:usb_serial.c  ****         UDINT = 0;
 725:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 726:usb_serial.c  **** 		UENUM = 0;
 727:usb_serial.c  **** 		UECONX = 1;
 728:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 729:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 730:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 731:usb_serial.c  **** 		usb_configuration = 0;
 732:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 733:usb_serial.c  ****         }
 734:usb_serial.c  **** 	if (intbits & (1<<SOFI)) {
 735:usb_serial.c  **** 		if (usb_configuration) {
 736:usb_serial.c  **** 			t = transmit_flush_timer;
 737:usb_serial.c  **** 			if (t) {
 738:usb_serial.c  **** 				transmit_flush_timer = --t;
 739:usb_serial.c  **** 				if (!t) {
 740:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 741:usb_serial.c  **** 					UEINTX = 0x3A;
 742:usb_serial.c  **** 				}
 743:usb_serial.c  **** 			}
 744:usb_serial.c  **** 		}
 745:usb_serial.c  **** 	}
 746:usb_serial.c  **** }
 747:usb_serial.c  **** 
 748:usb_serial.c  **** 
 749:usb_serial.c  **** // Misc functions to wait for ready and send/receive packets
 750:usb_serial.c  **** static inline void usb_wait_in_ready(void)
 751:usb_serial.c  **** {
  15               		.loc 1 751 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.L2:
 752:usb_serial.c  **** 	while (!(UEINTX & (1<<TXINI))) ;
  22               		.loc 1 752 33 discriminator 1 view .LVU1
  23               		.loc 1 752 11 is_stmt 0 discriminator 1 view .LVU2
  24 0000 8091 E800 		lds r24,232
  25               		.loc 1 752 8 discriminator 1 view .LVU3
  26 0004 80FF      		sbrs r24,0
  27 0006 00C0      		rjmp .L2
  28               	/* epilogue start */
 753:usb_serial.c  **** }
  29               		.loc 1 753 1 view .LVU4
  30 0008 0895      		ret
  31               		.cfi_endproc
  32               	.LFE17:
  34               		.section	.text.usb_init,"ax",@progbits
  35               	.global	usb_init
  37               	usb_init:
  38               	.LFB1:
 318:usb_serial.c  **** 	HW_CONFIG();
  39               		.loc 1 318 1 is_stmt 1 view -0
  40               		.cfi_startproc
  41               	/* prologue: function */
  42               	/* frame size = 0 */
  43               	/* stack size = 0 */
  44               	.L__stack_usage = 0
 319:usb_serial.c  ****         USB_FREEZE();				// enable USB
  45               		.loc 1 319 2 view .LVU6
  46 0000 81E0      		ldi r24,lo8(1)
  47 0002 8093 D700 		sts 215,r24
 320:usb_serial.c  ****         PLL_CONFIG();				// config PLL, 16 MHz xtal
  48               		.loc 1 320 9 view .LVU7
  49 0006 80EA      		ldi r24,lo8(-96)
  50 0008 8093 D800 		sts 216,r24
 321:usb_serial.c  ****         while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
  51               		.loc 1 321 9 view .LVU8
  52 000c 82E1      		ldi r24,lo8(18)
  53 000e 89BD      		out 0x29,r24
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  54               		.loc 1 322 9 view .LVU9
  55               	.L6:
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  56               		.loc 1 322 40 discriminator 1 view .LVU10
 322:usb_serial.c  ****         USB_CONFIG();				// start USB clock
  57               		.loc 1 322 15 is_stmt 0 discriminator 1 view .LVU11
  58 0010 09B4      		in __tmp_reg__,0x29
  59 0012 00FE      		sbrs __tmp_reg__,0
  60 0014 00C0      		rjmp .L6
 323:usb_serial.c  ****         UDCON = 0;				// enable attach resistor
  61               		.loc 1 323 9 is_stmt 1 view .LVU12
  62 0016 80E9      		ldi r24,lo8(-112)
  63 0018 8093 D800 		sts 216,r24
 324:usb_serial.c  **** 	usb_configuration = 0;
  64               		.loc 1 324 9 view .LVU13
 324:usb_serial.c  **** 	usb_configuration = 0;
  65               		.loc 1 324 15 is_stmt 0 view .LVU14
  66 001c 1092 E000 		sts 224,__zero_reg__
 325:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
  67               		.loc 1 325 2 is_stmt 1 view .LVU15
 325:usb_serial.c  **** 	cdc_line_rtsdtr = 0;
  68               		.loc 1 325 20 is_stmt 0 view .LVU16
  69 0020 1092 0000 		sts usb_configuration,__zero_reg__
 326:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
  70               		.loc 1 326 2 is_stmt 1 view .LVU17
 326:usb_serial.c  ****         UDIEN = (1<<EORSTE)|(1<<SOFE);
  71               		.loc 1 326 18 is_stmt 0 view .LVU18
  72 0024 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 327:usb_serial.c  **** 	sei();
  73               		.loc 1 327 9 is_stmt 1 view .LVU19
 327:usb_serial.c  **** 	sei();
  74               		.loc 1 327 15 is_stmt 0 view .LVU20
  75 0028 8CE0      		ldi r24,lo8(12)
  76 002a 8093 E200 		sts 226,r24
 328:usb_serial.c  **** }
  77               		.loc 1 328 2 is_stmt 1 view .LVU21
  78               	/* #APP */
  79               	 ;  328 "usb_serial.c" 1
  80 002e 7894      		sei
  81               	 ;  0 "" 2
  82               	/* #NOAPP */
  83               	/* epilogue start */
 329:usb_serial.c  **** 
  84               		.loc 1 329 1 is_stmt 0 view .LVU22
  85 0030 0895      		ret
  86               		.cfi_endproc
  87               	.LFE1:
  89               		.section	.text.usb_configured,"ax",@progbits
  90               	.global	usb_configured
  92               	usb_configured:
  93               	.LFB2:
 334:usb_serial.c  **** 	return usb_configuration;
  94               		.loc 1 334 1 is_stmt 1 view -0
  95               		.cfi_startproc
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
 335:usb_serial.c  **** }
 100               		.loc 1 335 2 view .LVU24
 335:usb_serial.c  **** }
 101               		.loc 1 335 9 is_stmt 0 view .LVU25
 102 0000 8091 0000 		lds r24,usb_configuration
 103               	/* epilogue start */
 336:usb_serial.c  **** 
 104               		.loc 1 336 1 view .LVU26
 105 0004 0895      		ret
 106               		.cfi_endproc
 107               	.LFE2:
 109               		.section	.text.usb_serial_getchar,"ax",@progbits
 110               	.global	usb_serial_getchar
 112               	usb_serial_getchar:
 113               	.LFB3:
 340:usb_serial.c  **** 	uint8_t c, intr_state;
 114               		.loc 1 340 1 is_stmt 1 view -0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 341:usb_serial.c  **** 
 120               		.loc 1 341 2 view .LVU28
 346:usb_serial.c  **** 	cli();
 121               		.loc 1 346 2 view .LVU29
 346:usb_serial.c  **** 	cli();
 122               		.loc 1 346 13 is_stmt 0 view .LVU30
 123 0000 9FB7      		in r25,__SREG__
 124               	.LVL0:
 347:usb_serial.c  **** 	if (!usb_configuration) {
 125               		.loc 1 347 2 is_stmt 1 view .LVU31
 126               	/* #APP */
 127               	 ;  347 "usb_serial.c" 1
 128 0002 F894      		cli
 129               	 ;  0 "" 2
 348:usb_serial.c  **** 		SREG = intr_state;
 130               		.loc 1 348 2 view .LVU32
 348:usb_serial.c  **** 		SREG = intr_state;
 131               		.loc 1 348 6 is_stmt 0 view .LVU33
 132               	/* #NOAPP */
 133 0004 8091 0000 		lds r24,usb_configuration
 348:usb_serial.c  **** 		SREG = intr_state;
 134               		.loc 1 348 5 view .LVU34
 135 0008 8111      		cpse r24,__zero_reg__
 136 000a 00C0      		rjmp .L11
 137               	.L15:
 361:usb_serial.c  **** 		return -1;
 138               		.loc 1 361 3 is_stmt 1 view .LVU35
 361:usb_serial.c  **** 		return -1;
 139               		.loc 1 361 8 is_stmt 0 view .LVU36
 140 000c 9FBF      		out __SREG__,r25
 362:usb_serial.c  **** 	}
 141               		.loc 1 362 3 is_stmt 1 view .LVU37
 362:usb_serial.c  **** 	}
 142               		.loc 1 362 10 is_stmt 0 view .LVU38
 143 000e 8FEF      		ldi r24,lo8(-1)
 144 0010 9FEF      		ldi r25,lo8(-1)
 145 0012 0895      		ret
 146               	.L11:
 352:usb_serial.c  **** 	retry:
 147               		.loc 1 352 2 is_stmt 1 view .LVU39
 352:usb_serial.c  **** 	retry:
 148               		.loc 1 352 8 is_stmt 0 view .LVU40
 149 0014 83E0      		ldi r24,lo8(3)
 150 0016 8093 E900 		sts 233,r24
 358:usb_serial.c  **** 			goto retry;
 151               		.loc 1 358 11 view .LVU41
 152 001a 2BE6      		ldi r18,lo8(107)
 153               	.L13:
 354:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 154               		.loc 1 354 2 is_stmt 1 view .LVU42
 354:usb_serial.c  **** 	if (!(c & (1<<RWAL))) {
 155               		.loc 1 354 4 is_stmt 0 view .LVU43
 156 001c 8091 E800 		lds r24,232
 157               	.LVL1:
 355:usb_serial.c  **** 		// no data in buffer
 158               		.loc 1 355 2 is_stmt 1 view .LVU44
 355:usb_serial.c  **** 		// no data in buffer
 159               		.loc 1 355 5 is_stmt 0 view .LVU45
 160 0020 85FD      		sbrc r24,5
 161 0022 00C0      		rjmp .L14
 357:usb_serial.c  **** 			UEINTX = 0x6B;
 162               		.loc 1 357 3 is_stmt 1 view .LVU46
 357:usb_serial.c  **** 			UEINTX = 0x6B;
 163               		.loc 1 357 6 is_stmt 0 view .LVU47
 164 0024 82FF      		sbrs r24,2
 165 0026 00C0      		rjmp .L15
 358:usb_serial.c  **** 			goto retry;
 166               		.loc 1 358 4 is_stmt 1 view .LVU48
 358:usb_serial.c  **** 			goto retry;
 167               		.loc 1 358 11 is_stmt 0 view .LVU49
 168 0028 2093 E800 		sts 232,r18
 359:usb_serial.c  **** 		}
 169               		.loc 1 359 4 is_stmt 1 view .LVU50
 170 002c 00C0      		rjmp .L13
 171               	.L14:
 365:usb_serial.c  **** 	// if buffer completely used, release it
 172               		.loc 1 365 2 view .LVU51
 365:usb_serial.c  **** 	// if buffer completely used, release it
 173               		.loc 1 365 4 is_stmt 0 view .LVU52
 174 002e 8091 F100 		lds r24,241
 175               	.LVL2:
 367:usb_serial.c  **** 	SREG = intr_state;
 176               		.loc 1 367 2 is_stmt 1 view .LVU53
 367:usb_serial.c  **** 	SREG = intr_state;
 177               		.loc 1 367 8 is_stmt 0 view .LVU54
 178 0032 2091 E800 		lds r18,232
 367:usb_serial.c  **** 	SREG = intr_state;
 179               		.loc 1 367 5 view .LVU55
 180 0036 25FD      		sbrc r18,5
 181 0038 00C0      		rjmp .L16
 367:usb_serial.c  **** 	SREG = intr_state;
 182               		.loc 1 367 29 is_stmt 1 discriminator 1 view .LVU56
 367:usb_serial.c  **** 	SREG = intr_state;
 183               		.loc 1 367 36 is_stmt 0 discriminator 1 view .LVU57
 184 003a 2BE6      		ldi r18,lo8(107)
 185 003c 2093 E800 		sts 232,r18
 186               	.L16:
 368:usb_serial.c  **** 	return c;
 187               		.loc 1 368 2 is_stmt 1 view .LVU58
 368:usb_serial.c  **** 	return c;
 188               		.loc 1 368 7 is_stmt 0 view .LVU59
 189 0040 9FBF      		out __SREG__,r25
 369:usb_serial.c  **** }
 190               		.loc 1 369 2 is_stmt 1 view .LVU60
 369:usb_serial.c  **** }
 191               		.loc 1 369 9 is_stmt 0 view .LVU61
 192 0042 90E0      		ldi r25,0
 193               	.LVL3:
 194               	/* epilogue start */
 370:usb_serial.c  **** 
 195               		.loc 1 370 1 view .LVU62
 196 0044 0895      		ret
 197               		.cfi_endproc
 198               	.LFE3:
 200               		.section	.text.usb_serial_available,"ax",@progbits
 201               	.global	usb_serial_available
 203               	usb_serial_available:
 204               	.LFB4:
 374:usb_serial.c  **** 	uint8_t n=0, i, intr_state;
 205               		.loc 1 374 1 is_stmt 1 view -0
 206               		.cfi_startproc
 207               	/* prologue: function */
 208               	/* frame size = 0 */
 209               	/* stack size = 0 */
 210               	.L__stack_usage = 0
 375:usb_serial.c  **** 
 211               		.loc 1 375 2 view .LVU64
 212               	.LVL4:
 377:usb_serial.c  **** 	cli();
 213               		.loc 1 377 2 view .LVU65
 377:usb_serial.c  **** 	cli();
 214               		.loc 1 377 13 is_stmt 0 view .LVU66
 215 0000 2FB7      		in r18,__SREG__
 216               	.LVL5:
 378:usb_serial.c  **** 	if (usb_configuration) {
 217               		.loc 1 378 2 is_stmt 1 view .LVU67
 218               	/* #APP */
 219               	 ;  378 "usb_serial.c" 1
 220 0002 F894      		cli
 221               	 ;  0 "" 2
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 222               		.loc 1 379 2 view .LVU68
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 223               		.loc 1 379 6 is_stmt 0 view .LVU69
 224               	/* #NOAPP */
 225 0004 8091 0000 		lds r24,usb_configuration
 379:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 226               		.loc 1 379 5 view .LVU70
 227 0008 8111      		cpse r24,__zero_reg__
 228 000a 00C0      		rjmp .L18
 229               	.LVL6:
 230               	.L20:
 375:usb_serial.c  **** 
 231               		.loc 1 375 10 view .LVU71
 232 000c 80E0      		ldi r24,0
 233               	.L19:
 234               	.LVL7:
 387:usb_serial.c  **** 	return n;
 235               		.loc 1 387 2 is_stmt 1 view .LVU72
 387:usb_serial.c  **** 	return n;
 236               		.loc 1 387 7 is_stmt 0 view .LVU73
 237 000e 2FBF      		out __SREG__,r18
 388:usb_serial.c  **** }
 238               		.loc 1 388 2 is_stmt 1 view .LVU74
 239               	/* epilogue start */
 389:usb_serial.c  **** 
 240               		.loc 1 389 1 is_stmt 0 view .LVU75
 241 0010 0895      		ret
 242               	.LVL8:
 243               	.L18:
 380:usb_serial.c  **** 		n = UEBCLX;
 244               		.loc 1 380 3 is_stmt 1 view .LVU76
 380:usb_serial.c  **** 		n = UEBCLX;
 245               		.loc 1 380 9 is_stmt 0 view .LVU77
 246 0012 83E0      		ldi r24,lo8(3)
 247 0014 8093 E900 		sts 233,r24
 381:usb_serial.c  **** 		if (!n) {
 248               		.loc 1 381 3 is_stmt 1 view .LVU78
 381:usb_serial.c  **** 		if (!n) {
 249               		.loc 1 381 5 is_stmt 0 view .LVU79
 250 0018 8091 F200 		lds r24,242
 251               	.LVL9:
 382:usb_serial.c  **** 			i = UEINTX;
 252               		.loc 1 382 3 is_stmt 1 view .LVU80
 382:usb_serial.c  **** 			i = UEINTX;
 253               		.loc 1 382 6 is_stmt 0 view .LVU81
 254 001c 8111      		cpse r24,__zero_reg__
 255 001e 00C0      		rjmp .L19
 383:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 256               		.loc 1 383 4 is_stmt 1 view .LVU82
 383:usb_serial.c  **** 			if (i & (1<<RXOUTI) && !(i & (1<<RWAL))) UEINTX = 0x6B;
 257               		.loc 1 383 6 is_stmt 0 view .LVU83
 258 0020 9091 E800 		lds r25,232
 259               	.LVL10:
 384:usb_serial.c  **** 		}
 260               		.loc 1 384 4 is_stmt 1 view .LVU84
 384:usb_serial.c  **** 		}
 261               		.loc 1 384 7 is_stmt 0 view .LVU85
 262 0024 92FF      		sbrs r25,2
 263 0026 00C0      		rjmp .L20
 384:usb_serial.c  **** 		}
 264               		.loc 1 384 24 discriminator 1 view .LVU86
 265 0028 892F      		mov r24,r25
 266               	.LVL11:
 384:usb_serial.c  **** 		}
 267               		.loc 1 384 24 discriminator 1 view .LVU87
 268 002a 8072      		andi r24,lo8(32)
 269 002c 95FD      		sbrc r25,5
 270 002e 00C0      		rjmp .L20
 384:usb_serial.c  **** 		}
 271               		.loc 1 384 45 is_stmt 1 discriminator 2 view .LVU88
 384:usb_serial.c  **** 		}
 272               		.loc 1 384 52 is_stmt 0 discriminator 2 view .LVU89
 273 0030 9BE6      		ldi r25,lo8(107)
 274               	.LVL12:
 384:usb_serial.c  **** 		}
 275               		.loc 1 384 52 discriminator 2 view .LVU90
 276 0032 9093 E800 		sts 232,r25
 277 0036 00C0      		rjmp .L19
 278               		.cfi_endproc
 279               	.LFE4:
 281               		.section	.text.usb_serial_flush_input,"ax",@progbits
 282               	.global	usb_serial_flush_input
 284               	usb_serial_flush_input:
 285               	.LFB5:
 393:usb_serial.c  **** 	uint8_t intr_state;
 286               		.loc 1 393 1 is_stmt 1 view -0
 287               		.cfi_startproc
 288               	/* prologue: function */
 289               	/* frame size = 0 */
 290               	/* stack size = 0 */
 291               	.L__stack_usage = 0
 394:usb_serial.c  **** 
 292               		.loc 1 394 2 view .LVU92
 396:usb_serial.c  **** 		intr_state = SREG;
 293               		.loc 1 396 2 view .LVU93
 396:usb_serial.c  **** 		intr_state = SREG;
 294               		.loc 1 396 6 is_stmt 0 view .LVU94
 295 0000 8091 0000 		lds r24,usb_configuration
 396:usb_serial.c  **** 		intr_state = SREG;
 296               		.loc 1 396 5 view .LVU95
 297 0004 8823      		tst r24
 298 0006 01F0      		breq .L24
 397:usb_serial.c  **** 		cli();
 299               		.loc 1 397 3 is_stmt 1 view .LVU96
 397:usb_serial.c  **** 		cli();
 300               		.loc 1 397 14 is_stmt 0 view .LVU97
 301 0008 8FB7      		in r24,__SREG__
 302               	.LVL13:
 398:usb_serial.c  **** 		UENUM = CDC_RX_ENDPOINT;
 303               		.loc 1 398 3 is_stmt 1 view .LVU98
 304               	/* #APP */
 305               	 ;  398 "usb_serial.c" 1
 306 000a F894      		cli
 307               	 ;  0 "" 2
 399:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 308               		.loc 1 399 3 view .LVU99
 399:usb_serial.c  **** 		while ((UEINTX & (1<<RWAL))) {
 309               		.loc 1 399 9 is_stmt 0 view .LVU100
 310               	/* #NOAPP */
 311 000c 93E0      		ldi r25,lo8(3)
 312 000e 9093 E900 		sts 233,r25
 400:usb_serial.c  **** 			UEINTX = 0x6B;
 313               		.loc 1 400 3 is_stmt 1 view .LVU101
 401:usb_serial.c  **** 		}
 314               		.loc 1 401 11 is_stmt 0 view .LVU102
 315 0012 2BE6      		ldi r18,lo8(107)
 316               	.L26:
 400:usb_serial.c  **** 			UEINTX = 0x6B;
 317               		.loc 1 400 11 view .LVU103
 318 0014 9091 E800 		lds r25,232
 400:usb_serial.c  **** 			UEINTX = 0x6B;
 319               		.loc 1 400 9 view .LVU104
 320 0018 95FD      		sbrc r25,5
 321 001a 00C0      		rjmp .L27
 403:usb_serial.c  **** 	}
 322               		.loc 1 403 3 is_stmt 1 view .LVU105
 403:usb_serial.c  **** 	}
 323               		.loc 1 403 8 is_stmt 0 view .LVU106
 324 001c 8FBF      		out __SREG__,r24
 325               	.LVL14:
 326               	.L24:
 327               	/* epilogue start */
 405:usb_serial.c  **** 
 328               		.loc 1 405 1 view .LVU107
 329 001e 0895      		ret
 330               	.LVL15:
 331               	.L27:
 401:usb_serial.c  **** 		}
 332               		.loc 1 401 4 is_stmt 1 view .LVU108
 401:usb_serial.c  **** 		}
 333               		.loc 1 401 11 is_stmt 0 view .LVU109
 334 0020 2093 E800 		sts 232,r18
 335 0024 00C0      		rjmp .L26
 336               		.cfi_endproc
 337               	.LFE5:
 339               		.section	.text.usb_serial_putchar,"ax",@progbits
 340               	.global	usb_serial_putchar
 342               	usb_serial_putchar:
 343               	.LVL16:
 344               	.LFB6:
 409:usb_serial.c  **** 	uint8_t timeout, intr_state;
 345               		.loc 1 409 1 is_stmt 1 view -0
 346               		.cfi_startproc
 347               	/* prologue: function */
 348               	/* frame size = 0 */
 349               	/* stack size = 0 */
 350               	.L__stack_usage = 0
 410:usb_serial.c  **** 
 351               		.loc 1 410 2 view .LVU111
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 352               		.loc 1 413 2 view .LVU112
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 353               		.loc 1 413 6 is_stmt 0 view .LVU113
 354 0000 9091 0000 		lds r25,usb_configuration
 413:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 355               		.loc 1 413 5 view .LVU114
 356 0004 9111      		cpse r25,__zero_reg__
 357 0006 00C0      		rjmp .L32
 358               	.LVL17:
 359               	.L47:
 424:usb_serial.c  **** 		}
 360               		.loc 1 424 4 is_stmt 1 view .LVU115
 424:usb_serial.c  **** 		}
 361               		.loc 1 424 11 is_stmt 0 view .LVU116
 362 0008 8FEF      		ldi r24,lo8(-1)
 363 000a 0895      		ret
 364               	.LVL18:
 365               	.L32:
 417:usb_serial.c  **** 	cli();
 366               		.loc 1 417 2 is_stmt 1 view .LVU117
 417:usb_serial.c  **** 	cli();
 367               		.loc 1 417 13 is_stmt 0 view .LVU118
 368 000c 9FB7      		in r25,__SREG__
 369               	.LVL19:
 418:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 370               		.loc 1 418 2 is_stmt 1 view .LVU119
 371               	/* #APP */
 372               	 ;  418 "usb_serial.c" 1
 373 000e F894      		cli
 374               	 ;  0 "" 2
 419:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 375               		.loc 1 419 2 view .LVU120
 419:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 376               		.loc 1 419 8 is_stmt 0 view .LVU121
 377               	/* #NOAPP */
 378 0010 24E0      		ldi r18,lo8(4)
 379 0012 2093 E900 		sts 233,r18
 421:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 380               		.loc 1 421 2 is_stmt 1 view .LVU122
 421:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 381               		.loc 1 421 5 is_stmt 0 view .LVU123
 382 0016 2091 0000 		lds r18,transmit_previous_timeout
 383 001a 2223      		tst r18
 384 001c 01F0      		breq .L34
 422:usb_serial.c  **** 			SREG = intr_state;
 385               		.loc 1 422 3 is_stmt 1 view .LVU124
 422:usb_serial.c  **** 			SREG = intr_state;
 386               		.loc 1 422 9 is_stmt 0 view .LVU125
 387 001e 2091 E800 		lds r18,232
 422:usb_serial.c  **** 			SREG = intr_state;
 388               		.loc 1 422 6 view .LVU126
 389 0022 25FD      		sbrc r18,5
 390 0024 00C0      		rjmp .L35
 423:usb_serial.c  **** 			return -1;
 391               		.loc 1 423 4 is_stmt 1 view .LVU127
 423:usb_serial.c  **** 			return -1;
 392               		.loc 1 423 9 is_stmt 0 view .LVU128
 393 0026 9FBF      		out __SREG__,r25
 394 0028 00C0      		rjmp .L47
 395               	.L35:
 426:usb_serial.c  **** 	}
 396               		.loc 1 426 3 is_stmt 1 view .LVU129
 426:usb_serial.c  **** 	}
 397               		.loc 1 426 29 is_stmt 0 view .LVU130
 398 002a 1092 0000 		sts transmit_previous_timeout,__zero_reg__
 399               	.L34:
 429:usb_serial.c  **** 	while (1) {
 400               		.loc 1 429 2 is_stmt 1 view .LVU131
 429:usb_serial.c  **** 	while (1) {
 401               		.loc 1 429 12 is_stmt 0 view .LVU132
 402 002e 2091 E400 		lds r18,228
 429:usb_serial.c  **** 	while (1) {
 403               		.loc 1 429 10 view .LVU133
 404 0032 275E      		subi r18,lo8(-(25))
 405               	.LVL20:
 445:usb_serial.c  **** 	}
 406               		.loc 1 445 9 view .LVU134
 407 0034 34E0      		ldi r19,lo8(4)
 408               	.L39:
 430:usb_serial.c  **** 		// are we ready to transmit?
 409               		.loc 1 430 2 is_stmt 1 view .LVU135
 432:usb_serial.c  **** 		SREG = intr_state;
 410               		.loc 1 432 3 view .LVU136
 432:usb_serial.c  **** 		SREG = intr_state;
 411               		.loc 1 432 7 is_stmt 0 view .LVU137
 412 0036 4091 E800 		lds r20,232
 432:usb_serial.c  **** 		SREG = intr_state;
 413               		.loc 1 432 6 view .LVU138
 414 003a 45FD      		sbrc r20,5
 415 003c 00C0      		rjmp .L36
 433:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 416               		.loc 1 433 3 is_stmt 1 view .LVU139
 433:usb_serial.c  **** 		// have we waited too long?  This happens if the user
 417               		.loc 1 433 8 is_stmt 0 view .LVU140
 418 003e 9FBF      		out __SREG__,r25
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 419               		.loc 1 436 3 is_stmt 1 view .LVU141
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 420               		.loc 1 436 7 is_stmt 0 view .LVU142
 421 0040 9091 E400 		lds r25,228
 422               	.LVL21:
 436:usb_serial.c  **** 			transmit_previous_timeout = 1;
 423               		.loc 1 436 6 view .LVU143
 424 0044 9213      		cpse r25,r18
 425 0046 00C0      		rjmp .L37
 437:usb_serial.c  **** 			return -1;
 426               		.loc 1 437 4 is_stmt 1 view .LVU144
 437:usb_serial.c  **** 			return -1;
 427               		.loc 1 437 30 is_stmt 0 view .LVU145
 428 0048 81E0      		ldi r24,lo8(1)
 429               	.LVL22:
 437:usb_serial.c  **** 			return -1;
 430               		.loc 1 437 30 view .LVU146
 431 004a 8093 0000 		sts transmit_previous_timeout,r24
 432               	.LVL23:
 438:usb_serial.c  **** 		}
 433               		.loc 1 438 4 is_stmt 1 view .LVU147
 434 004e 00C0      		rjmp .L47
 435               	.LVL24:
 436               	.L37:
 441:usb_serial.c  **** 		// get ready to try checking again
 437               		.loc 1 441 3 view .LVU148
 441:usb_serial.c  **** 		// get ready to try checking again
 438               		.loc 1 441 7 is_stmt 0 view .LVU149
 439 0050 9091 0000 		lds r25,usb_configuration
 441:usb_serial.c  **** 		// get ready to try checking again
 440               		.loc 1 441 6 view .LVU150
 441 0054 9923      		tst r25
 442 0056 01F0      		breq .L47
 443:usb_serial.c  **** 		cli();
 443               		.loc 1 443 3 is_stmt 1 view .LVU151
 443:usb_serial.c  **** 		cli();
 444               		.loc 1 443 14 is_stmt 0 view .LVU152
 445 0058 9FB7      		in r25,__SREG__
 446               	.LVL25:
 444:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 447               		.loc 1 444 3 is_stmt 1 view .LVU153
 448               	/* #APP */
 449               	 ;  444 "usb_serial.c" 1
 450 005a F894      		cli
 451               	 ;  0 "" 2
 445:usb_serial.c  **** 	}
 452               		.loc 1 445 3 view .LVU154
 445:usb_serial.c  **** 	}
 453               		.loc 1 445 9 is_stmt 0 view .LVU155
 454               	/* #NOAPP */
 455 005c 3093 E900 		sts 233,r19
 432:usb_serial.c  **** 		SREG = intr_state;
 456               		.loc 1 432 6 view .LVU156
 457 0060 00C0      		rjmp .L39
 458               	.L36:
 448:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 459               		.loc 1 448 2 is_stmt 1 view .LVU157
 448:usb_serial.c  **** 	// if this completed a packet, transmit it now!
 460               		.loc 1 448 9 is_stmt 0 view .LVU158
 461 0062 8093 F100 		sts 241,r24
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 462               		.loc 1 450 2 is_stmt 1 view .LVU159
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 463               		.loc 1 450 8 is_stmt 0 view .LVU160
 464 0066 8091 E800 		lds r24,232
 465               	.LVL26:
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 466               		.loc 1 450 5 view .LVU161
 467 006a 85FD      		sbrc r24,5
 468 006c 00C0      		rjmp .L40
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 469               		.loc 1 450 29 is_stmt 1 discriminator 1 view .LVU162
 450:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 470               		.loc 1 450 36 is_stmt 0 discriminator 1 view .LVU163
 471 006e 8AE3      		ldi r24,lo8(58)
 472 0070 8093 E800 		sts 232,r24
 473               	.LVL27:
 474               	.L40:
 451:usb_serial.c  **** 	SREG = intr_state;
 475               		.loc 1 451 2 is_stmt 1 view .LVU164
 451:usb_serial.c  **** 	SREG = intr_state;
 476               		.loc 1 451 23 is_stmt 0 view .LVU165
 477 0074 85E0      		ldi r24,lo8(5)
 478 0076 8093 0000 		sts transmit_flush_timer,r24
 452:usb_serial.c  **** 	return 0;
 479               		.loc 1 452 2 is_stmt 1 view .LVU166
 452:usb_serial.c  **** 	return 0;
 480               		.loc 1 452 7 is_stmt 0 view .LVU167
 481 007a 9FBF      		out __SREG__,r25
 453:usb_serial.c  **** }
 482               		.loc 1 453 2 is_stmt 1 view .LVU168
 453:usb_serial.c  **** }
 483               		.loc 1 453 9 is_stmt 0 view .LVU169
 484 007c 80E0      		ldi r24,0
 485               	/* epilogue start */
 454:usb_serial.c  **** 
 486               		.loc 1 454 1 view .LVU170
 487 007e 0895      		ret
 488               		.cfi_endproc
 489               	.LFE6:
 491               		.section	.text.usb_serial_putchar_nowait,"ax",@progbits
 492               	.global	usb_serial_putchar_nowait
 494               	usb_serial_putchar_nowait:
 495               	.LVL28:
 496               	.LFB7:
 460:usb_serial.c  **** 	uint8_t intr_state;
 497               		.loc 1 460 1 is_stmt 1 view -0
 498               		.cfi_startproc
 499               	/* prologue: function */
 500               	/* frame size = 0 */
 501               	/* stack size = 0 */
 502               	.L__stack_usage = 0
 461:usb_serial.c  **** 
 503               		.loc 1 461 2 view .LVU172
 463:usb_serial.c  **** 	intr_state = SREG;
 504               		.loc 1 463 2 view .LVU173
 463:usb_serial.c  **** 	intr_state = SREG;
 505               		.loc 1 463 6 is_stmt 0 view .LVU174
 506 0000 9091 0000 		lds r25,usb_configuration
 463:usb_serial.c  **** 	intr_state = SREG;
 507               		.loc 1 463 5 view .LVU175
 508 0004 9923      		tst r25
 509 0006 01F0      		breq .L52
 464:usb_serial.c  **** 	cli();
 510               		.loc 1 464 2 is_stmt 1 view .LVU176
 464:usb_serial.c  **** 	cli();
 511               		.loc 1 464 13 is_stmt 0 view .LVU177
 512 0008 9FB7      		in r25,__SREG__
 513               	.LVL29:
 465:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 514               		.loc 1 465 2 is_stmt 1 view .LVU178
 515               	/* #APP */
 516               	 ;  465 "usb_serial.c" 1
 517 000a F894      		cli
 518               	 ;  0 "" 2
 466:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 519               		.loc 1 466 2 view .LVU179
 466:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 520               		.loc 1 466 8 is_stmt 0 view .LVU180
 521               	/* #NOAPP */
 522 000c 24E0      		ldi r18,lo8(4)
 523 000e 2093 E900 		sts 233,r18
 467:usb_serial.c  **** 		// buffer is full
 524               		.loc 1 467 2 is_stmt 1 view .LVU181
 467:usb_serial.c  **** 		// buffer is full
 525               		.loc 1 467 8 is_stmt 0 view .LVU182
 526 0012 2091 E800 		lds r18,232
 467:usb_serial.c  **** 		// buffer is full
 527               		.loc 1 467 5 view .LVU183
 528 0016 25FD      		sbrc r18,5
 529 0018 00C0      		rjmp .L50
 469:usb_serial.c  **** 		return -1;
 530               		.loc 1 469 3 is_stmt 1 view .LVU184
 469:usb_serial.c  **** 		return -1;
 531               		.loc 1 469 8 is_stmt 0 view .LVU185
 532 001a 9FBF      		out __SREG__,r25
 470:usb_serial.c  **** 	}
 533               		.loc 1 470 3 is_stmt 1 view .LVU186
 534               	.LVL30:
 535               	.L52:
 463:usb_serial.c  **** 	intr_state = SREG;
 536               		.loc 1 463 33 is_stmt 0 view .LVU187
 537 001c 8FEF      		ldi r24,lo8(-1)
 538               	.LVL31:
 539               	/* epilogue start */
 479:usb_serial.c  **** 
 540               		.loc 1 479 1 view .LVU188
 541 001e 0895      		ret
 542               	.LVL32:
 543               	.L50:
 473:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 544               		.loc 1 473 2 is_stmt 1 view .LVU189
 473:usb_serial.c  **** 		// if this completed a packet, transmit it now!
 545               		.loc 1 473 9 is_stmt 0 view .LVU190
 546 0020 8093 F100 		sts 241,r24
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 547               		.loc 1 475 2 is_stmt 1 view .LVU191
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 548               		.loc 1 475 8 is_stmt 0 view .LVU192
 549 0024 8091 E800 		lds r24,232
 550               	.LVL33:
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 551               		.loc 1 475 5 view .LVU193
 552 0028 85FD      		sbrc r24,5
 553 002a 00C0      		rjmp .L51
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 554               		.loc 1 475 29 is_stmt 1 discriminator 1 view .LVU194
 475:usb_serial.c  **** 	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 555               		.loc 1 475 36 is_stmt 0 discriminator 1 view .LVU195
 556 002c 8AE3      		ldi r24,lo8(58)
 557 002e 8093 E800 		sts 232,r24
 558               	.LVL34:
 559               	.L51:
 476:usb_serial.c  **** 	SREG = intr_state;
 560               		.loc 1 476 2 is_stmt 1 view .LVU196
 476:usb_serial.c  **** 	SREG = intr_state;
 561               		.loc 1 476 23 is_stmt 0 view .LVU197
 562 0032 85E0      		ldi r24,lo8(5)
 563 0034 8093 0000 		sts transmit_flush_timer,r24
 477:usb_serial.c  **** 	return 0;
 564               		.loc 1 477 2 is_stmt 1 view .LVU198
 477:usb_serial.c  **** 	return 0;
 565               		.loc 1 477 7 is_stmt 0 view .LVU199
 566 0038 9FBF      		out __SREG__,r25
 478:usb_serial.c  **** }
 567               		.loc 1 478 2 is_stmt 1 view .LVU200
 478:usb_serial.c  **** }
 568               		.loc 1 478 9 is_stmt 0 view .LVU201
 569 003a 80E0      		ldi r24,0
 570 003c 0895      		ret
 571               		.cfi_endproc
 572               	.LFE7:
 574               		.section	.text.usb_serial_write,"ax",@progbits
 575               	.global	usb_serial_write
 577               	usb_serial_write:
 578               	.LVL35:
 579               	.LFB8:
 494:usb_serial.c  **** 	uint8_t timeout, intr_state, write_size;
 580               		.loc 1 494 1 is_stmt 1 view -0
 581               		.cfi_startproc
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 0 */
 585               	.L__stack_usage = 0
 495:usb_serial.c  **** 
 586               		.loc 1 495 2 view .LVU203
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 587               		.loc 1 498 2 view .LVU204
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 588               		.loc 1 498 6 is_stmt 0 view .LVU205
 589 0000 2091 0000 		lds r18,usb_configuration
 498:usb_serial.c  **** 	// interrupts are disabled so these functions can be
 590               		.loc 1 498 5 view .LVU206
 591 0004 2111      		cpse r18,__zero_reg__
 592 0006 00C0      		rjmp .L54
 593               	.LVL36:
 594               	.L138:
 509:usb_serial.c  **** 		}
 595               		.loc 1 509 4 is_stmt 1 view .LVU207
 509:usb_serial.c  **** 		}
 596               		.loc 1 509 11 is_stmt 0 view .LVU208
 597 0008 8FEF      		ldi r24,lo8(-1)
 598 000a 0895      		ret
 599               	.LVL37:
 600               	.L54:
 502:usb_serial.c  **** 	cli();
 601               		.loc 1 502 2 is_stmt 1 view .LVU209
 502:usb_serial.c  **** 	cli();
 602               		.loc 1 502 13 is_stmt 0 view .LVU210
 603 000c 2FB7      		in r18,__SREG__
 604               	.LVL38:
 503:usb_serial.c  **** 	UENUM = CDC_TX_ENDPOINT;
 605               		.loc 1 503 2 is_stmt 1 view .LVU211
 606               	/* #APP */
 607               	 ;  503 "usb_serial.c" 1
 608 000e F894      		cli
 609               	 ;  0 "" 2
 504:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 610               		.loc 1 504 2 view .LVU212
 504:usb_serial.c  **** 	// if we gave up due to timeout before, don't wait again
 611               		.loc 1 504 8 is_stmt 0 view .LVU213
 612               	/* #NOAPP */
 613 0010 34E0      		ldi r19,lo8(4)
 614 0012 3093 E900 		sts 233,r19
 506:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 615               		.loc 1 506 2 is_stmt 1 view .LVU214
 506:usb_serial.c  **** 		if (!(UEINTX & (1<<RWAL))) {
 616               		.loc 1 506 5 is_stmt 0 view .LVU215
 617 0016 3091 0000 		lds r19,transmit_previous_timeout
 618 001a 3323      		tst r19
 619 001c 01F0      		breq .L56
 507:usb_serial.c  **** 			SREG = intr_state;
 620               		.loc 1 507 3 is_stmt 1 view .LVU216
 507:usb_serial.c  **** 			SREG = intr_state;
 621               		.loc 1 507 9 is_stmt 0 view .LVU217
 622 001e 3091 E800 		lds r19,232
 507:usb_serial.c  **** 			SREG = intr_state;
 623               		.loc 1 507 6 view .LVU218
 624 0022 35FD      		sbrc r19,5
 625 0024 00C0      		rjmp .L57
 508:usb_serial.c  **** 			return -1;
 626               		.loc 1 508 4 is_stmt 1 view .LVU219
 508:usb_serial.c  **** 			return -1;
 627               		.loc 1 508 9 is_stmt 0 view .LVU220
 628 0026 2FBF      		out __SREG__,r18
 629 0028 00C0      		rjmp .L138
 630               	.L57:
 511:usb_serial.c  **** 	}
 631               		.loc 1 511 3 is_stmt 1 view .LVU221
 511:usb_serial.c  **** 	}
 632               		.loc 1 511 29 is_stmt 0 view .LVU222
 633 002a 1092 0000 		sts transmit_previous_timeout,__zero_reg__
 634               	.L56:
 532:usb_serial.c  **** 		}
 635               		.loc 1 532 10 view .LVU223
 636 002e 34E0      		ldi r19,lo8(4)
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 637               		.loc 1 536 14 view .LVU224
 638 0030 40E4      		ldi r20,lo8(64)
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 639               		.loc 1 616 37 view .LVU225
 640 0032 5AE3      		ldi r21,lo8(58)
 617:usb_serial.c  **** 		SREG = intr_state;
 641               		.loc 1 617 24 view .LVU226
 642 0034 A5E0      		ldi r26,lo8(5)
 643               	.LVL39:
 644               	.L58:
 514:usb_serial.c  **** 		// wait for the FIFO to be ready to accept data
 645               		.loc 1 514 8 view .LVU227
 646 0036 6115      		cp r22,__zero_reg__
 647 0038 7105      		cpc r23,__zero_reg__
 648 003a 01F4      		brne .L131
 620:usb_serial.c  **** }
 649               		.loc 1 620 9 view .LVU228
 650 003c 80E0      		ldi r24,0
 651               	.LVL40:
 652               	/* epilogue start */
 621:usb_serial.c  **** 
 653               		.loc 1 621 1 view .LVU229
 654 003e 0895      		ret
 655               	.LVL41:
 656               	.L131:
 516:usb_serial.c  **** 		while (1) {
 657               		.loc 1 516 3 is_stmt 1 view .LVU230
 516:usb_serial.c  **** 		while (1) {
 658               		.loc 1 516 13 is_stmt 0 view .LVU231
 659 0040 E091 E400 		lds r30,228
 516:usb_serial.c  **** 		while (1) {
 660               		.loc 1 516 11 view .LVU232
 661 0044 E75E      		subi r30,lo8(-(25))
 662               	.LVL42:
 663               	.L62:
 517:usb_serial.c  **** 			// are we ready to transmit?
 664               		.loc 1 517 3 is_stmt 1 view .LVU233
 519:usb_serial.c  **** 			SREG = intr_state;
 665               		.loc 1 519 4 view .LVU234
 519:usb_serial.c  **** 			SREG = intr_state;
 666               		.loc 1 519 8 is_stmt 0 view .LVU235
 667 0046 F091 E800 		lds r31,232
 519:usb_serial.c  **** 			SREG = intr_state;
 668               		.loc 1 519 7 view .LVU236
 669 004a F5FD      		sbrc r31,5
 670 004c 00C0      		rjmp .L59
 520:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 671               		.loc 1 520 4 is_stmt 1 view .LVU237
 520:usb_serial.c  **** 			// have we waited too long?  This happens if the user
 672               		.loc 1 520 9 is_stmt 0 view .LVU238
 673 004e 2FBF      		out __SREG__,r18
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 674               		.loc 1 523 4 is_stmt 1 view .LVU239
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 675               		.loc 1 523 8 is_stmt 0 view .LVU240
 676 0050 2091 E400 		lds r18,228
 677               	.LVL43:
 523:usb_serial.c  **** 				transmit_previous_timeout = 1;
 678               		.loc 1 523 7 view .LVU241
 679 0054 2E13      		cpse r18,r30
 680 0056 00C0      		rjmp .L60
 524:usb_serial.c  **** 				return -1;
 681               		.loc 1 524 5 is_stmt 1 view .LVU242
 524:usb_serial.c  **** 				return -1;
 682               		.loc 1 524 31 is_stmt 0 view .LVU243
 683 0058 81E0      		ldi r24,lo8(1)
 684               	.LVL44:
 524:usb_serial.c  **** 				return -1;
 685               		.loc 1 524 31 view .LVU244
 686 005a 8093 0000 		sts transmit_previous_timeout,r24
 687               	.LVL45:
 525:usb_serial.c  **** 			}
 688               		.loc 1 525 5 is_stmt 1 view .LVU245
 689 005e 00C0      		rjmp .L138
 690               	.LVL46:
 691               	.L60:
 528:usb_serial.c  **** 			// get ready to try checking again
 692               		.loc 1 528 4 view .LVU246
 528:usb_serial.c  **** 			// get ready to try checking again
 693               		.loc 1 528 8 is_stmt 0 view .LVU247
 694 0060 2091 0000 		lds r18,usb_configuration
 528:usb_serial.c  **** 			// get ready to try checking again
 695               		.loc 1 528 7 view .LVU248
 696 0064 2223      		tst r18
 697 0066 01F0      		breq .L138
 530:usb_serial.c  **** 			cli();
 698               		.loc 1 530 4 is_stmt 1 view .LVU249
 530:usb_serial.c  **** 			cli();
 699               		.loc 1 530 15 is_stmt 0 view .LVU250
 700 0068 2FB7      		in r18,__SREG__
 701               	.LVL47:
 531:usb_serial.c  **** 			UENUM = CDC_TX_ENDPOINT;
 702               		.loc 1 531 4 is_stmt 1 view .LVU251
 703               	/* #APP */
 704               	 ;  531 "usb_serial.c" 1
 705 006a F894      		cli
 706               	 ;  0 "" 2
 532:usb_serial.c  **** 		}
 707               		.loc 1 532 4 view .LVU252
 532:usb_serial.c  **** 		}
 708               		.loc 1 532 10 is_stmt 0 view .LVU253
 709               	/* #NOAPP */
 710 006c 3093 E900 		sts 233,r19
 519:usb_serial.c  **** 			SREG = intr_state;
 711               		.loc 1 519 7 view .LVU254
 712 0070 00C0      		rjmp .L62
 713               	.L59:
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 714               		.loc 1 536 3 is_stmt 1 view .LVU255
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 715               		.loc 1 536 30 is_stmt 0 view .LVU256
 716 0072 E091 F200 		lds r30,242
 717               	.LVL48:
 536:usb_serial.c  **** 		if (write_size > size) write_size = size;
 718               		.loc 1 536 14 view .LVU257
 719 0076 B42F      		mov r27,r20
 720 0078 BE1B      		sub r27,r30
 721               	.LVL49:
 537:usb_serial.c  **** 		size -= write_size;
 722               		.loc 1 537 3 is_stmt 1 view .LVU258
 537:usb_serial.c  **** 		size -= write_size;
 723               		.loc 1 537 6 is_stmt 0 view .LVU259
 724 007a B617      		cp r27,r22
 725 007c 1706      		cpc __zero_reg__,r23
 726 007e 01F0      		breq .L63
 727 0080 00F0      		brlo .L63
 537:usb_serial.c  **** 		size -= write_size;
 728               		.loc 1 537 26 is_stmt 1 discriminator 1 view .LVU260
 537:usb_serial.c  **** 		size -= write_size;
 729               		.loc 1 537 37 is_stmt 0 discriminator 1 view .LVU261
 730 0082 B62F      		mov r27,r22
 731               	.LVL50:
 732               	.L63:
 538:usb_serial.c  **** 
 733               		.loc 1 538 3 is_stmt 1 view .LVU262
 538:usb_serial.c  **** 
 734               		.loc 1 538 8 is_stmt 0 view .LVU263
 735 0084 EB2F      		mov r30,r27
 736 0086 F0E0      		ldi r31,0
 737 0088 6E1B      		sub r22,r30
 738 008a 7F0B      		sbc r23,r31
 739               	.LVL51:
 541:usb_serial.c  **** 			#if (CDC_TX_SIZE == 64)
 740               		.loc 1 541 3 is_stmt 1 view .LVU264
 741 008c B134      		cpi r27,lo8(65)
 742 008e 00F0      		brlo .+2
 743 0090 00C0      		rjmp .L64
 744 0092 E050      		subi r30,lo8(-(gs(.L66)))
 745 0094 F040      		sbci r31,hi8(-(gs(.L66)))
 746 0096 0C94 0000 		jmp __tablejump2__
 747               		.section	.jumptables.gcc.usb_serial_write,"a",@progbits
 748               		.p2align	1
 749               	.L66:
 750 0000 0000      		.word gs(.L129)
 751 0002 0000      		.word gs(.L64)
 752 0004 0000      		.word gs(.L128)
 753 0006 0000      		.word gs(.L127)
 754 0008 0000      		.word gs(.L126)
 755 000a 0000      		.word gs(.L125)
 756 000c 0000      		.word gs(.L124)
 757 000e 0000      		.word gs(.L123)
 758 0010 0000      		.word gs(.L122)
 759 0012 0000      		.word gs(.L121)
 760 0014 0000      		.word gs(.L120)
 761 0016 0000      		.word gs(.L119)
 762 0018 0000      		.word gs(.L118)
 763 001a 0000      		.word gs(.L117)
 764 001c 0000      		.word gs(.L116)
 765 001e 0000      		.word gs(.L115)
 766 0020 0000      		.word gs(.L114)
 767 0022 0000      		.word gs(.L113)
 768 0024 0000      		.word gs(.L112)
 769 0026 0000      		.word gs(.L111)
 770 0028 0000      		.word gs(.L110)
 771 002a 0000      		.word gs(.L109)
 772 002c 0000      		.word gs(.L108)
 773 002e 0000      		.word gs(.L107)
 774 0030 0000      		.word gs(.L106)
 775 0032 0000      		.word gs(.L105)
 776 0034 0000      		.word gs(.L104)
 777 0036 0000      		.word gs(.L103)
 778 0038 0000      		.word gs(.L102)
 779 003a 0000      		.word gs(.L101)
 780 003c 0000      		.word gs(.L100)
 781 003e 0000      		.word gs(.L99)
 782 0040 0000      		.word gs(.L98)
 783 0042 0000      		.word gs(.L97)
 784 0044 0000      		.word gs(.L96)
 785 0046 0000      		.word gs(.L95)
 786 0048 0000      		.word gs(.L94)
 787 004a 0000      		.word gs(.L93)
 788 004c 0000      		.word gs(.L92)
 789 004e 0000      		.word gs(.L91)
 790 0050 0000      		.word gs(.L90)
 791 0052 0000      		.word gs(.L89)
 792 0054 0000      		.word gs(.L88)
 793 0056 0000      		.word gs(.L87)
 794 0058 0000      		.word gs(.L86)
 795 005a 0000      		.word gs(.L85)
 796 005c 0000      		.word gs(.L84)
 797 005e 0000      		.word gs(.L83)
 798 0060 0000      		.word gs(.L82)
 799 0062 0000      		.word gs(.L81)
 800 0064 0000      		.word gs(.L80)
 801 0066 0000      		.word gs(.L79)
 802 0068 0000      		.word gs(.L78)
 803 006a 0000      		.word gs(.L77)
 804 006c 0000      		.word gs(.L76)
 805 006e 0000      		.word gs(.L75)
 806 0070 0000      		.word gs(.L74)
 807 0072 0000      		.word gs(.L73)
 808 0074 0000      		.word gs(.L72)
 809 0076 0000      		.word gs(.L71)
 810 0078 0000      		.word gs(.L70)
 811 007a 0000      		.word gs(.L69)
 812 007c 0000      		.word gs(.L68)
 813 007e 0000      		.word gs(.L67)
 814 0080 0000      		.word gs(.L65)
 815               		.section	.text.usb_serial_write
 816               	.L65:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 817               		.loc 1 543 13 view .LVU265
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 818               		.loc 1 543 29 is_stmt 0 view .LVU266
 819 009a FC01      		movw r30,r24
 820               	.LVL52:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 821               		.loc 1 543 22 view .LVU267
 822 009c 8191      		ld r24,Z+
 823               	.LVL53:
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 824               		.loc 1 543 20 view .LVU268
 825 009e 8093 F100 		sts 241,r24
 543:usb_serial.c  **** 			case 63: UEDATX = *buffer++;
 826               		.loc 1 543 29 view .LVU269
 827 00a2 CF01      		movw r24,r30
 828               	.LVL54:
 829               	.L67:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 830               		.loc 1 544 13 is_stmt 1 view .LVU270
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 831               		.loc 1 544 29 is_stmt 0 view .LVU271
 832 00a4 FC01      		movw r30,r24
 833               	.LVL55:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 834               		.loc 1 544 22 view .LVU272
 835 00a6 8191      		ld r24,Z+
 836               	.LVL56:
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 837               		.loc 1 544 20 view .LVU273
 838 00a8 8093 F100 		sts 241,r24
 544:usb_serial.c  **** 			case 62: UEDATX = *buffer++;
 839               		.loc 1 544 29 view .LVU274
 840 00ac CF01      		movw r24,r30
 841               	.LVL57:
 842               	.L68:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 843               		.loc 1 545 13 is_stmt 1 view .LVU275
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 844               		.loc 1 545 29 is_stmt 0 view .LVU276
 845 00ae FC01      		movw r30,r24
 846               	.LVL58:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 847               		.loc 1 545 22 view .LVU277
 848 00b0 8191      		ld r24,Z+
 849               	.LVL59:
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 850               		.loc 1 545 20 view .LVU278
 851 00b2 8093 F100 		sts 241,r24
 545:usb_serial.c  **** 			case 61: UEDATX = *buffer++;
 852               		.loc 1 545 29 view .LVU279
 853 00b6 CF01      		movw r24,r30
 854               	.LVL60:
 855               	.L69:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 856               		.loc 1 546 13 is_stmt 1 view .LVU280
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 857               		.loc 1 546 29 is_stmt 0 view .LVU281
 858 00b8 FC01      		movw r30,r24
 859               	.LVL61:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 860               		.loc 1 546 22 view .LVU282
 861 00ba 8191      		ld r24,Z+
 862               	.LVL62:
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 863               		.loc 1 546 20 view .LVU283
 864 00bc 8093 F100 		sts 241,r24
 546:usb_serial.c  **** 			case 60: UEDATX = *buffer++;
 865               		.loc 1 546 29 view .LVU284
 866 00c0 CF01      		movw r24,r30
 867               	.LVL63:
 868               	.L70:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 869               		.loc 1 547 13 is_stmt 1 view .LVU285
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 870               		.loc 1 547 29 is_stmt 0 view .LVU286
 871 00c2 FC01      		movw r30,r24
 872               	.LVL64:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 873               		.loc 1 547 22 view .LVU287
 874 00c4 8191      		ld r24,Z+
 875               	.LVL65:
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 876               		.loc 1 547 20 view .LVU288
 877 00c6 8093 F100 		sts 241,r24
 547:usb_serial.c  **** 			case 59: UEDATX = *buffer++;
 878               		.loc 1 547 29 view .LVU289
 879 00ca CF01      		movw r24,r30
 880               	.LVL66:
 881               	.L71:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 882               		.loc 1 548 13 is_stmt 1 view .LVU290
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 883               		.loc 1 548 29 is_stmt 0 view .LVU291
 884 00cc FC01      		movw r30,r24
 885               	.LVL67:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 886               		.loc 1 548 22 view .LVU292
 887 00ce 8191      		ld r24,Z+
 888               	.LVL68:
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 889               		.loc 1 548 20 view .LVU293
 890 00d0 8093 F100 		sts 241,r24
 548:usb_serial.c  **** 			case 58: UEDATX = *buffer++;
 891               		.loc 1 548 29 view .LVU294
 892 00d4 CF01      		movw r24,r30
 893               	.LVL69:
 894               	.L72:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 895               		.loc 1 549 13 is_stmt 1 view .LVU295
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 896               		.loc 1 549 29 is_stmt 0 view .LVU296
 897 00d6 FC01      		movw r30,r24
 898               	.LVL70:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 899               		.loc 1 549 22 view .LVU297
 900 00d8 8191      		ld r24,Z+
 901               	.LVL71:
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 902               		.loc 1 549 20 view .LVU298
 903 00da 8093 F100 		sts 241,r24
 549:usb_serial.c  **** 			case 57: UEDATX = *buffer++;
 904               		.loc 1 549 29 view .LVU299
 905 00de CF01      		movw r24,r30
 906               	.LVL72:
 907               	.L73:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 908               		.loc 1 550 13 is_stmt 1 view .LVU300
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 909               		.loc 1 550 29 is_stmt 0 view .LVU301
 910 00e0 FC01      		movw r30,r24
 911               	.LVL73:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 912               		.loc 1 550 22 view .LVU302
 913 00e2 8191      		ld r24,Z+
 914               	.LVL74:
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 915               		.loc 1 550 20 view .LVU303
 916 00e4 8093 F100 		sts 241,r24
 550:usb_serial.c  **** 			case 56: UEDATX = *buffer++;
 917               		.loc 1 550 29 view .LVU304
 918 00e8 CF01      		movw r24,r30
 919               	.LVL75:
 920               	.L74:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 921               		.loc 1 551 13 is_stmt 1 view .LVU305
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 922               		.loc 1 551 29 is_stmt 0 view .LVU306
 923 00ea FC01      		movw r30,r24
 924               	.LVL76:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 925               		.loc 1 551 22 view .LVU307
 926 00ec 8191      		ld r24,Z+
 927               	.LVL77:
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 928               		.loc 1 551 20 view .LVU308
 929 00ee 8093 F100 		sts 241,r24
 551:usb_serial.c  **** 			case 55: UEDATX = *buffer++;
 930               		.loc 1 551 29 view .LVU309
 931 00f2 CF01      		movw r24,r30
 932               	.LVL78:
 933               	.L75:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 934               		.loc 1 552 13 is_stmt 1 view .LVU310
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 935               		.loc 1 552 29 is_stmt 0 view .LVU311
 936 00f4 FC01      		movw r30,r24
 937               	.LVL79:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 938               		.loc 1 552 22 view .LVU312
 939 00f6 8191      		ld r24,Z+
 940               	.LVL80:
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 941               		.loc 1 552 20 view .LVU313
 942 00f8 8093 F100 		sts 241,r24
 552:usb_serial.c  **** 			case 54: UEDATX = *buffer++;
 943               		.loc 1 552 29 view .LVU314
 944 00fc CF01      		movw r24,r30
 945               	.LVL81:
 946               	.L76:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 947               		.loc 1 553 13 is_stmt 1 view .LVU315
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 948               		.loc 1 553 29 is_stmt 0 view .LVU316
 949 00fe FC01      		movw r30,r24
 950               	.LVL82:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 951               		.loc 1 553 22 view .LVU317
 952 0100 8191      		ld r24,Z+
 953               	.LVL83:
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 954               		.loc 1 553 20 view .LVU318
 955 0102 8093 F100 		sts 241,r24
 553:usb_serial.c  **** 			case 53: UEDATX = *buffer++;
 956               		.loc 1 553 29 view .LVU319
 957 0106 CF01      		movw r24,r30
 958               	.LVL84:
 959               	.L77:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 960               		.loc 1 554 13 is_stmt 1 view .LVU320
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 961               		.loc 1 554 29 is_stmt 0 view .LVU321
 962 0108 FC01      		movw r30,r24
 963               	.LVL85:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 964               		.loc 1 554 22 view .LVU322
 965 010a 8191      		ld r24,Z+
 966               	.LVL86:
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 967               		.loc 1 554 20 view .LVU323
 968 010c 8093 F100 		sts 241,r24
 554:usb_serial.c  **** 			case 52: UEDATX = *buffer++;
 969               		.loc 1 554 29 view .LVU324
 970 0110 CF01      		movw r24,r30
 971               	.LVL87:
 972               	.L78:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 973               		.loc 1 555 13 is_stmt 1 view .LVU325
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 974               		.loc 1 555 29 is_stmt 0 view .LVU326
 975 0112 FC01      		movw r30,r24
 976               	.LVL88:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 977               		.loc 1 555 22 view .LVU327
 978 0114 8191      		ld r24,Z+
 979               	.LVL89:
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 980               		.loc 1 555 20 view .LVU328
 981 0116 8093 F100 		sts 241,r24
 555:usb_serial.c  **** 			case 51: UEDATX = *buffer++;
 982               		.loc 1 555 29 view .LVU329
 983 011a CF01      		movw r24,r30
 984               	.LVL90:
 985               	.L79:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 986               		.loc 1 556 13 is_stmt 1 view .LVU330
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 987               		.loc 1 556 29 is_stmt 0 view .LVU331
 988 011c FC01      		movw r30,r24
 989               	.LVL91:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 990               		.loc 1 556 22 view .LVU332
 991 011e 8191      		ld r24,Z+
 992               	.LVL92:
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 993               		.loc 1 556 20 view .LVU333
 994 0120 8093 F100 		sts 241,r24
 556:usb_serial.c  **** 			case 50: UEDATX = *buffer++;
 995               		.loc 1 556 29 view .LVU334
 996 0124 CF01      		movw r24,r30
 997               	.LVL93:
 998               	.L80:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 999               		.loc 1 557 13 is_stmt 1 view .LVU335
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1000               		.loc 1 557 29 is_stmt 0 view .LVU336
 1001 0126 FC01      		movw r30,r24
 1002               	.LVL94:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1003               		.loc 1 557 22 view .LVU337
 1004 0128 8191      		ld r24,Z+
 1005               	.LVL95:
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1006               		.loc 1 557 20 view .LVU338
 1007 012a 8093 F100 		sts 241,r24
 557:usb_serial.c  **** 			case 49: UEDATX = *buffer++;
 1008               		.loc 1 557 29 view .LVU339
 1009 012e CF01      		movw r24,r30
 1010               	.LVL96:
 1011               	.L81:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1012               		.loc 1 558 13 is_stmt 1 view .LVU340
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1013               		.loc 1 558 29 is_stmt 0 view .LVU341
 1014 0130 FC01      		movw r30,r24
 1015               	.LVL97:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1016               		.loc 1 558 22 view .LVU342
 1017 0132 8191      		ld r24,Z+
 1018               	.LVL98:
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1019               		.loc 1 558 20 view .LVU343
 1020 0134 8093 F100 		sts 241,r24
 558:usb_serial.c  **** 			case 48: UEDATX = *buffer++;
 1021               		.loc 1 558 29 view .LVU344
 1022 0138 CF01      		movw r24,r30
 1023               	.LVL99:
 1024               	.L82:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1025               		.loc 1 559 13 is_stmt 1 view .LVU345
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1026               		.loc 1 559 29 is_stmt 0 view .LVU346
 1027 013a FC01      		movw r30,r24
 1028               	.LVL100:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1029               		.loc 1 559 22 view .LVU347
 1030 013c 8191      		ld r24,Z+
 1031               	.LVL101:
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1032               		.loc 1 559 20 view .LVU348
 1033 013e 8093 F100 		sts 241,r24
 559:usb_serial.c  **** 			case 47: UEDATX = *buffer++;
 1034               		.loc 1 559 29 view .LVU349
 1035 0142 CF01      		movw r24,r30
 1036               	.LVL102:
 1037               	.L83:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1038               		.loc 1 560 13 is_stmt 1 view .LVU350
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1039               		.loc 1 560 29 is_stmt 0 view .LVU351
 1040 0144 FC01      		movw r30,r24
 1041               	.LVL103:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1042               		.loc 1 560 22 view .LVU352
 1043 0146 8191      		ld r24,Z+
 1044               	.LVL104:
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1045               		.loc 1 560 20 view .LVU353
 1046 0148 8093 F100 		sts 241,r24
 560:usb_serial.c  **** 			case 46: UEDATX = *buffer++;
 1047               		.loc 1 560 29 view .LVU354
 1048 014c CF01      		movw r24,r30
 1049               	.LVL105:
 1050               	.L84:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1051               		.loc 1 561 13 is_stmt 1 view .LVU355
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1052               		.loc 1 561 29 is_stmt 0 view .LVU356
 1053 014e FC01      		movw r30,r24
 1054               	.LVL106:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1055               		.loc 1 561 22 view .LVU357
 1056 0150 8191      		ld r24,Z+
 1057               	.LVL107:
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1058               		.loc 1 561 20 view .LVU358
 1059 0152 8093 F100 		sts 241,r24
 561:usb_serial.c  **** 			case 45: UEDATX = *buffer++;
 1060               		.loc 1 561 29 view .LVU359
 1061 0156 CF01      		movw r24,r30
 1062               	.LVL108:
 1063               	.L85:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1064               		.loc 1 562 13 is_stmt 1 view .LVU360
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1065               		.loc 1 562 29 is_stmt 0 view .LVU361
 1066 0158 FC01      		movw r30,r24
 1067               	.LVL109:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1068               		.loc 1 562 22 view .LVU362
 1069 015a 8191      		ld r24,Z+
 1070               	.LVL110:
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1071               		.loc 1 562 20 view .LVU363
 1072 015c 8093 F100 		sts 241,r24
 562:usb_serial.c  **** 			case 44: UEDATX = *buffer++;
 1073               		.loc 1 562 29 view .LVU364
 1074 0160 CF01      		movw r24,r30
 1075               	.LVL111:
 1076               	.L86:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1077               		.loc 1 563 13 is_stmt 1 view .LVU365
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1078               		.loc 1 563 29 is_stmt 0 view .LVU366
 1079 0162 FC01      		movw r30,r24
 1080               	.LVL112:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1081               		.loc 1 563 22 view .LVU367
 1082 0164 8191      		ld r24,Z+
 1083               	.LVL113:
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1084               		.loc 1 563 20 view .LVU368
 1085 0166 8093 F100 		sts 241,r24
 563:usb_serial.c  **** 			case 43: UEDATX = *buffer++;
 1086               		.loc 1 563 29 view .LVU369
 1087 016a CF01      		movw r24,r30
 1088               	.LVL114:
 1089               	.L87:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1090               		.loc 1 564 13 is_stmt 1 view .LVU370
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1091               		.loc 1 564 29 is_stmt 0 view .LVU371
 1092 016c FC01      		movw r30,r24
 1093               	.LVL115:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1094               		.loc 1 564 22 view .LVU372
 1095 016e 8191      		ld r24,Z+
 1096               	.LVL116:
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1097               		.loc 1 564 20 view .LVU373
 1098 0170 8093 F100 		sts 241,r24
 564:usb_serial.c  **** 			case 42: UEDATX = *buffer++;
 1099               		.loc 1 564 29 view .LVU374
 1100 0174 CF01      		movw r24,r30
 1101               	.LVL117:
 1102               	.L88:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1103               		.loc 1 565 13 is_stmt 1 view .LVU375
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1104               		.loc 1 565 29 is_stmt 0 view .LVU376
 1105 0176 FC01      		movw r30,r24
 1106               	.LVL118:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1107               		.loc 1 565 22 view .LVU377
 1108 0178 8191      		ld r24,Z+
 1109               	.LVL119:
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1110               		.loc 1 565 20 view .LVU378
 1111 017a 8093 F100 		sts 241,r24
 565:usb_serial.c  **** 			case 41: UEDATX = *buffer++;
 1112               		.loc 1 565 29 view .LVU379
 1113 017e CF01      		movw r24,r30
 1114               	.LVL120:
 1115               	.L89:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1116               		.loc 1 566 13 is_stmt 1 view .LVU380
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1117               		.loc 1 566 29 is_stmt 0 view .LVU381
 1118 0180 FC01      		movw r30,r24
 1119               	.LVL121:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1120               		.loc 1 566 22 view .LVU382
 1121 0182 8191      		ld r24,Z+
 1122               	.LVL122:
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1123               		.loc 1 566 20 view .LVU383
 1124 0184 8093 F100 		sts 241,r24
 566:usb_serial.c  **** 			case 40: UEDATX = *buffer++;
 1125               		.loc 1 566 29 view .LVU384
 1126 0188 CF01      		movw r24,r30
 1127               	.LVL123:
 1128               	.L90:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1129               		.loc 1 567 13 is_stmt 1 view .LVU385
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1130               		.loc 1 567 29 is_stmt 0 view .LVU386
 1131 018a FC01      		movw r30,r24
 1132               	.LVL124:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1133               		.loc 1 567 22 view .LVU387
 1134 018c 8191      		ld r24,Z+
 1135               	.LVL125:
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1136               		.loc 1 567 20 view .LVU388
 1137 018e 8093 F100 		sts 241,r24
 567:usb_serial.c  **** 			case 39: UEDATX = *buffer++;
 1138               		.loc 1 567 29 view .LVU389
 1139 0192 CF01      		movw r24,r30
 1140               	.LVL126:
 1141               	.L91:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1142               		.loc 1 568 13 is_stmt 1 view .LVU390
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1143               		.loc 1 568 29 is_stmt 0 view .LVU391
 1144 0194 FC01      		movw r30,r24
 1145               	.LVL127:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1146               		.loc 1 568 22 view .LVU392
 1147 0196 8191      		ld r24,Z+
 1148               	.LVL128:
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1149               		.loc 1 568 20 view .LVU393
 1150 0198 8093 F100 		sts 241,r24
 568:usb_serial.c  **** 			case 38: UEDATX = *buffer++;
 1151               		.loc 1 568 29 view .LVU394
 1152 019c CF01      		movw r24,r30
 1153               	.LVL129:
 1154               	.L92:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1155               		.loc 1 569 13 is_stmt 1 view .LVU395
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1156               		.loc 1 569 29 is_stmt 0 view .LVU396
 1157 019e FC01      		movw r30,r24
 1158               	.LVL130:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1159               		.loc 1 569 22 view .LVU397
 1160 01a0 8191      		ld r24,Z+
 1161               	.LVL131:
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1162               		.loc 1 569 20 view .LVU398
 1163 01a2 8093 F100 		sts 241,r24
 569:usb_serial.c  **** 			case 37: UEDATX = *buffer++;
 1164               		.loc 1 569 29 view .LVU399
 1165 01a6 CF01      		movw r24,r30
 1166               	.LVL132:
 1167               	.L93:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1168               		.loc 1 570 13 is_stmt 1 view .LVU400
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1169               		.loc 1 570 29 is_stmt 0 view .LVU401
 1170 01a8 FC01      		movw r30,r24
 1171               	.LVL133:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1172               		.loc 1 570 22 view .LVU402
 1173 01aa 8191      		ld r24,Z+
 1174               	.LVL134:
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1175               		.loc 1 570 20 view .LVU403
 1176 01ac 8093 F100 		sts 241,r24
 570:usb_serial.c  **** 			case 36: UEDATX = *buffer++;
 1177               		.loc 1 570 29 view .LVU404
 1178 01b0 CF01      		movw r24,r30
 1179               	.LVL135:
 1180               	.L94:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1181               		.loc 1 571 13 is_stmt 1 view .LVU405
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1182               		.loc 1 571 29 is_stmt 0 view .LVU406
 1183 01b2 FC01      		movw r30,r24
 1184               	.LVL136:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1185               		.loc 1 571 22 view .LVU407
 1186 01b4 8191      		ld r24,Z+
 1187               	.LVL137:
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1188               		.loc 1 571 20 view .LVU408
 1189 01b6 8093 F100 		sts 241,r24
 571:usb_serial.c  **** 			case 35: UEDATX = *buffer++;
 1190               		.loc 1 571 29 view .LVU409
 1191 01ba CF01      		movw r24,r30
 1192               	.LVL138:
 1193               	.L95:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1194               		.loc 1 572 13 is_stmt 1 view .LVU410
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1195               		.loc 1 572 29 is_stmt 0 view .LVU411
 1196 01bc FC01      		movw r30,r24
 1197               	.LVL139:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1198               		.loc 1 572 22 view .LVU412
 1199 01be 8191      		ld r24,Z+
 1200               	.LVL140:
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1201               		.loc 1 572 20 view .LVU413
 1202 01c0 8093 F100 		sts 241,r24
 572:usb_serial.c  **** 			case 34: UEDATX = *buffer++;
 1203               		.loc 1 572 29 view .LVU414
 1204 01c4 CF01      		movw r24,r30
 1205               	.LVL141:
 1206               	.L96:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1207               		.loc 1 573 13 is_stmt 1 view .LVU415
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1208               		.loc 1 573 29 is_stmt 0 view .LVU416
 1209 01c6 FC01      		movw r30,r24
 1210               	.LVL142:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1211               		.loc 1 573 22 view .LVU417
 1212 01c8 8191      		ld r24,Z+
 1213               	.LVL143:
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1214               		.loc 1 573 20 view .LVU418
 1215 01ca 8093 F100 		sts 241,r24
 573:usb_serial.c  **** 			case 33: UEDATX = *buffer++;
 1216               		.loc 1 573 29 view .LVU419
 1217 01ce CF01      		movw r24,r30
 1218               	.LVL144:
 1219               	.L97:
 574:usb_serial.c  **** 			#endif
 1220               		.loc 1 574 13 is_stmt 1 view .LVU420
 574:usb_serial.c  **** 			#endif
 1221               		.loc 1 574 29 is_stmt 0 view .LVU421
 1222 01d0 FC01      		movw r30,r24
 1223               	.LVL145:
 574:usb_serial.c  **** 			#endif
 1224               		.loc 1 574 22 view .LVU422
 1225 01d2 8191      		ld r24,Z+
 1226               	.LVL146:
 574:usb_serial.c  **** 			#endif
 1227               		.loc 1 574 20 view .LVU423
 1228 01d4 8093 F100 		sts 241,r24
 574:usb_serial.c  **** 			#endif
 1229               		.loc 1 574 29 view .LVU424
 1230 01d8 CF01      		movw r24,r30
 1231               	.LVL147:
 1232               	.L98:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1233               		.loc 1 577 13 is_stmt 1 view .LVU425
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1234               		.loc 1 577 29 is_stmt 0 view .LVU426
 1235 01da FC01      		movw r30,r24
 1236               	.LVL148:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1237               		.loc 1 577 22 view .LVU427
 1238 01dc 8191      		ld r24,Z+
 1239               	.LVL149:
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1240               		.loc 1 577 20 view .LVU428
 1241 01de 8093 F100 		sts 241,r24
 577:usb_serial.c  **** 			case 31: UEDATX = *buffer++;
 1242               		.loc 1 577 29 view .LVU429
 1243 01e2 CF01      		movw r24,r30
 1244               	.LVL150:
 1245               	.L99:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1246               		.loc 1 578 13 is_stmt 1 view .LVU430
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1247               		.loc 1 578 29 is_stmt 0 view .LVU431
 1248 01e4 FC01      		movw r30,r24
 1249               	.LVL151:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1250               		.loc 1 578 22 view .LVU432
 1251 01e6 8191      		ld r24,Z+
 1252               	.LVL152:
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1253               		.loc 1 578 20 view .LVU433
 1254 01e8 8093 F100 		sts 241,r24
 578:usb_serial.c  **** 			case 30: UEDATX = *buffer++;
 1255               		.loc 1 578 29 view .LVU434
 1256 01ec CF01      		movw r24,r30
 1257               	.LVL153:
 1258               	.L100:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1259               		.loc 1 579 13 is_stmt 1 view .LVU435
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1260               		.loc 1 579 29 is_stmt 0 view .LVU436
 1261 01ee FC01      		movw r30,r24
 1262               	.LVL154:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1263               		.loc 1 579 22 view .LVU437
 1264 01f0 8191      		ld r24,Z+
 1265               	.LVL155:
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1266               		.loc 1 579 20 view .LVU438
 1267 01f2 8093 F100 		sts 241,r24
 579:usb_serial.c  **** 			case 29: UEDATX = *buffer++;
 1268               		.loc 1 579 29 view .LVU439
 1269 01f6 CF01      		movw r24,r30
 1270               	.LVL156:
 1271               	.L101:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1272               		.loc 1 580 13 is_stmt 1 view .LVU440
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1273               		.loc 1 580 29 is_stmt 0 view .LVU441
 1274 01f8 FC01      		movw r30,r24
 1275               	.LVL157:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1276               		.loc 1 580 22 view .LVU442
 1277 01fa 8191      		ld r24,Z+
 1278               	.LVL158:
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1279               		.loc 1 580 20 view .LVU443
 1280 01fc 8093 F100 		sts 241,r24
 580:usb_serial.c  **** 			case 28: UEDATX = *buffer++;
 1281               		.loc 1 580 29 view .LVU444
 1282 0200 CF01      		movw r24,r30
 1283               	.LVL159:
 1284               	.L102:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1285               		.loc 1 581 13 is_stmt 1 view .LVU445
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1286               		.loc 1 581 29 is_stmt 0 view .LVU446
 1287 0202 FC01      		movw r30,r24
 1288               	.LVL160:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1289               		.loc 1 581 22 view .LVU447
 1290 0204 8191      		ld r24,Z+
 1291               	.LVL161:
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1292               		.loc 1 581 20 view .LVU448
 1293 0206 8093 F100 		sts 241,r24
 581:usb_serial.c  **** 			case 27: UEDATX = *buffer++;
 1294               		.loc 1 581 29 view .LVU449
 1295 020a CF01      		movw r24,r30
 1296               	.LVL162:
 1297               	.L103:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1298               		.loc 1 582 13 is_stmt 1 view .LVU450
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1299               		.loc 1 582 29 is_stmt 0 view .LVU451
 1300 020c FC01      		movw r30,r24
 1301               	.LVL163:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1302               		.loc 1 582 22 view .LVU452
 1303 020e 8191      		ld r24,Z+
 1304               	.LVL164:
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1305               		.loc 1 582 20 view .LVU453
 1306 0210 8093 F100 		sts 241,r24
 582:usb_serial.c  **** 			case 26: UEDATX = *buffer++;
 1307               		.loc 1 582 29 view .LVU454
 1308 0214 CF01      		movw r24,r30
 1309               	.LVL165:
 1310               	.L104:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1311               		.loc 1 583 13 is_stmt 1 view .LVU455
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1312               		.loc 1 583 29 is_stmt 0 view .LVU456
 1313 0216 FC01      		movw r30,r24
 1314               	.LVL166:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1315               		.loc 1 583 22 view .LVU457
 1316 0218 8191      		ld r24,Z+
 1317               	.LVL167:
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1318               		.loc 1 583 20 view .LVU458
 1319 021a 8093 F100 		sts 241,r24
 583:usb_serial.c  **** 			case 25: UEDATX = *buffer++;
 1320               		.loc 1 583 29 view .LVU459
 1321 021e CF01      		movw r24,r30
 1322               	.LVL168:
 1323               	.L105:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1324               		.loc 1 584 13 is_stmt 1 view .LVU460
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1325               		.loc 1 584 29 is_stmt 0 view .LVU461
 1326 0220 FC01      		movw r30,r24
 1327               	.LVL169:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1328               		.loc 1 584 22 view .LVU462
 1329 0222 8191      		ld r24,Z+
 1330               	.LVL170:
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1331               		.loc 1 584 20 view .LVU463
 1332 0224 8093 F100 		sts 241,r24
 584:usb_serial.c  **** 			case 24: UEDATX = *buffer++;
 1333               		.loc 1 584 29 view .LVU464
 1334 0228 CF01      		movw r24,r30
 1335               	.LVL171:
 1336               	.L106:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1337               		.loc 1 585 13 is_stmt 1 view .LVU465
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1338               		.loc 1 585 29 is_stmt 0 view .LVU466
 1339 022a FC01      		movw r30,r24
 1340               	.LVL172:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1341               		.loc 1 585 22 view .LVU467
 1342 022c 8191      		ld r24,Z+
 1343               	.LVL173:
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1344               		.loc 1 585 20 view .LVU468
 1345 022e 8093 F100 		sts 241,r24
 585:usb_serial.c  **** 			case 23: UEDATX = *buffer++;
 1346               		.loc 1 585 29 view .LVU469
 1347 0232 CF01      		movw r24,r30
 1348               	.LVL174:
 1349               	.L107:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1350               		.loc 1 586 13 is_stmt 1 view .LVU470
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1351               		.loc 1 586 29 is_stmt 0 view .LVU471
 1352 0234 FC01      		movw r30,r24
 1353               	.LVL175:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1354               		.loc 1 586 22 view .LVU472
 1355 0236 8191      		ld r24,Z+
 1356               	.LVL176:
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1357               		.loc 1 586 20 view .LVU473
 1358 0238 8093 F100 		sts 241,r24
 586:usb_serial.c  **** 			case 22: UEDATX = *buffer++;
 1359               		.loc 1 586 29 view .LVU474
 1360 023c CF01      		movw r24,r30
 1361               	.LVL177:
 1362               	.L108:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1363               		.loc 1 587 13 is_stmt 1 view .LVU475
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1364               		.loc 1 587 29 is_stmt 0 view .LVU476
 1365 023e FC01      		movw r30,r24
 1366               	.LVL178:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1367               		.loc 1 587 22 view .LVU477
 1368 0240 8191      		ld r24,Z+
 1369               	.LVL179:
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1370               		.loc 1 587 20 view .LVU478
 1371 0242 8093 F100 		sts 241,r24
 587:usb_serial.c  **** 			case 21: UEDATX = *buffer++;
 1372               		.loc 1 587 29 view .LVU479
 1373 0246 CF01      		movw r24,r30
 1374               	.LVL180:
 1375               	.L109:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1376               		.loc 1 588 13 is_stmt 1 view .LVU480
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1377               		.loc 1 588 29 is_stmt 0 view .LVU481
 1378 0248 FC01      		movw r30,r24
 1379               	.LVL181:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1380               		.loc 1 588 22 view .LVU482
 1381 024a 8191      		ld r24,Z+
 1382               	.LVL182:
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1383               		.loc 1 588 20 view .LVU483
 1384 024c 8093 F100 		sts 241,r24
 588:usb_serial.c  **** 			case 20: UEDATX = *buffer++;
 1385               		.loc 1 588 29 view .LVU484
 1386 0250 CF01      		movw r24,r30
 1387               	.LVL183:
 1388               	.L110:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1389               		.loc 1 589 13 is_stmt 1 view .LVU485
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1390               		.loc 1 589 29 is_stmt 0 view .LVU486
 1391 0252 FC01      		movw r30,r24
 1392               	.LVL184:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1393               		.loc 1 589 22 view .LVU487
 1394 0254 8191      		ld r24,Z+
 1395               	.LVL185:
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1396               		.loc 1 589 20 view .LVU488
 1397 0256 8093 F100 		sts 241,r24
 589:usb_serial.c  **** 			case 19: UEDATX = *buffer++;
 1398               		.loc 1 589 29 view .LVU489
 1399 025a CF01      		movw r24,r30
 1400               	.LVL186:
 1401               	.L111:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1402               		.loc 1 590 13 is_stmt 1 view .LVU490
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1403               		.loc 1 590 29 is_stmt 0 view .LVU491
 1404 025c FC01      		movw r30,r24
 1405               	.LVL187:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1406               		.loc 1 590 22 view .LVU492
 1407 025e 8191      		ld r24,Z+
 1408               	.LVL188:
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1409               		.loc 1 590 20 view .LVU493
 1410 0260 8093 F100 		sts 241,r24
 590:usb_serial.c  **** 			case 18: UEDATX = *buffer++;
 1411               		.loc 1 590 29 view .LVU494
 1412 0264 CF01      		movw r24,r30
 1413               	.LVL189:
 1414               	.L112:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1415               		.loc 1 591 13 is_stmt 1 view .LVU495
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1416               		.loc 1 591 29 is_stmt 0 view .LVU496
 1417 0266 FC01      		movw r30,r24
 1418               	.LVL190:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1419               		.loc 1 591 22 view .LVU497
 1420 0268 8191      		ld r24,Z+
 1421               	.LVL191:
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1422               		.loc 1 591 20 view .LVU498
 1423 026a 8093 F100 		sts 241,r24
 591:usb_serial.c  **** 			case 17: UEDATX = *buffer++;
 1424               		.loc 1 591 29 view .LVU499
 1425 026e CF01      		movw r24,r30
 1426               	.LVL192:
 1427               	.L113:
 592:usb_serial.c  **** 			#endif
 1428               		.loc 1 592 13 is_stmt 1 view .LVU500
 592:usb_serial.c  **** 			#endif
 1429               		.loc 1 592 29 is_stmt 0 view .LVU501
 1430 0270 FC01      		movw r30,r24
 1431               	.LVL193:
 592:usb_serial.c  **** 			#endif
 1432               		.loc 1 592 22 view .LVU502
 1433 0272 8191      		ld r24,Z+
 1434               	.LVL194:
 592:usb_serial.c  **** 			#endif
 1435               		.loc 1 592 20 view .LVU503
 1436 0274 8093 F100 		sts 241,r24
 592:usb_serial.c  **** 			#endif
 1437               		.loc 1 592 29 view .LVU504
 1438 0278 CF01      		movw r24,r30
 1439               	.LVL195:
 1440               	.L114:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1441               		.loc 1 595 13 is_stmt 1 view .LVU505
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1442               		.loc 1 595 29 is_stmt 0 view .LVU506
 1443 027a FC01      		movw r30,r24
 1444               	.LVL196:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1445               		.loc 1 595 22 view .LVU507
 1446 027c 8191      		ld r24,Z+
 1447               	.LVL197:
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1448               		.loc 1 595 20 view .LVU508
 1449 027e 8093 F100 		sts 241,r24
 595:usb_serial.c  **** 			case 15: UEDATX = *buffer++;
 1450               		.loc 1 595 29 view .LVU509
 1451 0282 CF01      		movw r24,r30
 1452               	.LVL198:
 1453               	.L115:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1454               		.loc 1 596 13 is_stmt 1 view .LVU510
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1455               		.loc 1 596 29 is_stmt 0 view .LVU511
 1456 0284 FC01      		movw r30,r24
 1457               	.LVL199:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1458               		.loc 1 596 22 view .LVU512
 1459 0286 8191      		ld r24,Z+
 1460               	.LVL200:
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1461               		.loc 1 596 20 view .LVU513
 1462 0288 8093 F100 		sts 241,r24
 596:usb_serial.c  **** 			case 14: UEDATX = *buffer++;
 1463               		.loc 1 596 29 view .LVU514
 1464 028c CF01      		movw r24,r30
 1465               	.LVL201:
 1466               	.L116:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1467               		.loc 1 597 13 is_stmt 1 view .LVU515
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1468               		.loc 1 597 29 is_stmt 0 view .LVU516
 1469 028e FC01      		movw r30,r24
 1470               	.LVL202:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1471               		.loc 1 597 22 view .LVU517
 1472 0290 8191      		ld r24,Z+
 1473               	.LVL203:
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1474               		.loc 1 597 20 view .LVU518
 1475 0292 8093 F100 		sts 241,r24
 597:usb_serial.c  **** 			case 13: UEDATX = *buffer++;
 1476               		.loc 1 597 29 view .LVU519
 1477 0296 CF01      		movw r24,r30
 1478               	.LVL204:
 1479               	.L117:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1480               		.loc 1 598 13 is_stmt 1 view .LVU520
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1481               		.loc 1 598 29 is_stmt 0 view .LVU521
 1482 0298 FC01      		movw r30,r24
 1483               	.LVL205:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1484               		.loc 1 598 22 view .LVU522
 1485 029a 8191      		ld r24,Z+
 1486               	.LVL206:
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1487               		.loc 1 598 20 view .LVU523
 1488 029c 8093 F100 		sts 241,r24
 598:usb_serial.c  **** 			case 12: UEDATX = *buffer++;
 1489               		.loc 1 598 29 view .LVU524
 1490 02a0 CF01      		movw r24,r30
 1491               	.LVL207:
 1492               	.L118:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1493               		.loc 1 599 13 is_stmt 1 view .LVU525
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1494               		.loc 1 599 29 is_stmt 0 view .LVU526
 1495 02a2 FC01      		movw r30,r24
 1496               	.LVL208:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1497               		.loc 1 599 22 view .LVU527
 1498 02a4 8191      		ld r24,Z+
 1499               	.LVL209:
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1500               		.loc 1 599 20 view .LVU528
 1501 02a6 8093 F100 		sts 241,r24
 599:usb_serial.c  **** 			case 11: UEDATX = *buffer++;
 1502               		.loc 1 599 29 view .LVU529
 1503 02aa CF01      		movw r24,r30
 1504               	.LVL210:
 1505               	.L119:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1506               		.loc 1 600 13 is_stmt 1 view .LVU530
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1507               		.loc 1 600 29 is_stmt 0 view .LVU531
 1508 02ac FC01      		movw r30,r24
 1509               	.LVL211:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1510               		.loc 1 600 22 view .LVU532
 1511 02ae 8191      		ld r24,Z+
 1512               	.LVL212:
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1513               		.loc 1 600 20 view .LVU533
 1514 02b0 8093 F100 		sts 241,r24
 600:usb_serial.c  **** 			case 10: UEDATX = *buffer++;
 1515               		.loc 1 600 29 view .LVU534
 1516 02b4 CF01      		movw r24,r30
 1517               	.LVL213:
 1518               	.L120:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1519               		.loc 1 601 13 is_stmt 1 view .LVU535
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1520               		.loc 1 601 29 is_stmt 0 view .LVU536
 1521 02b6 FC01      		movw r30,r24
 1522               	.LVL214:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1523               		.loc 1 601 22 view .LVU537
 1524 02b8 8191      		ld r24,Z+
 1525               	.LVL215:
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1526               		.loc 1 601 20 view .LVU538
 1527 02ba 8093 F100 		sts 241,r24
 601:usb_serial.c  **** 			case  9: UEDATX = *buffer++;
 1528               		.loc 1 601 29 view .LVU539
 1529 02be CF01      		movw r24,r30
 1530               	.LVL216:
 1531               	.L121:
 602:usb_serial.c  **** 			#endif
 1532               		.loc 1 602 13 is_stmt 1 view .LVU540
 602:usb_serial.c  **** 			#endif
 1533               		.loc 1 602 29 is_stmt 0 view .LVU541
 1534 02c0 FC01      		movw r30,r24
 1535               	.LVL217:
 602:usb_serial.c  **** 			#endif
 1536               		.loc 1 602 22 view .LVU542
 1537 02c2 8191      		ld r24,Z+
 1538               	.LVL218:
 602:usb_serial.c  **** 			#endif
 1539               		.loc 1 602 20 view .LVU543
 1540 02c4 8093 F100 		sts 241,r24
 602:usb_serial.c  **** 			#endif
 1541               		.loc 1 602 29 view .LVU544
 1542 02c8 CF01      		movw r24,r30
 1543               	.LVL219:
 1544               	.L122:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1545               		.loc 1 604 13 is_stmt 1 view .LVU545
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1546               		.loc 1 604 29 is_stmt 0 view .LVU546
 1547 02ca FC01      		movw r30,r24
 1548               	.LVL220:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1549               		.loc 1 604 22 view .LVU547
 1550 02cc 8191      		ld r24,Z+
 1551               	.LVL221:
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1552               		.loc 1 604 20 view .LVU548
 1553 02ce 8093 F100 		sts 241,r24
 604:usb_serial.c  **** 			case  7: UEDATX = *buffer++;
 1554               		.loc 1 604 29 view .LVU549
 1555 02d2 CF01      		movw r24,r30
 1556               	.LVL222:
 1557               	.L123:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1558               		.loc 1 605 13 is_stmt 1 view .LVU550
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1559               		.loc 1 605 29 is_stmt 0 view .LVU551
 1560 02d4 FC01      		movw r30,r24
 1561               	.LVL223:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1562               		.loc 1 605 22 view .LVU552
 1563 02d6 8191      		ld r24,Z+
 1564               	.LVL224:
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1565               		.loc 1 605 20 view .LVU553
 1566 02d8 8093 F100 		sts 241,r24
 605:usb_serial.c  **** 			case  6: UEDATX = *buffer++;
 1567               		.loc 1 605 29 view .LVU554
 1568 02dc CF01      		movw r24,r30
 1569               	.LVL225:
 1570               	.L124:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1571               		.loc 1 606 13 is_stmt 1 view .LVU555
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1572               		.loc 1 606 29 is_stmt 0 view .LVU556
 1573 02de FC01      		movw r30,r24
 1574               	.LVL226:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1575               		.loc 1 606 22 view .LVU557
 1576 02e0 8191      		ld r24,Z+
 1577               	.LVL227:
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1578               		.loc 1 606 20 view .LVU558
 1579 02e2 8093 F100 		sts 241,r24
 606:usb_serial.c  **** 			case  5: UEDATX = *buffer++;
 1580               		.loc 1 606 29 view .LVU559
 1581 02e6 CF01      		movw r24,r30
 1582               	.LVL228:
 1583               	.L125:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1584               		.loc 1 607 13 is_stmt 1 view .LVU560
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1585               		.loc 1 607 29 is_stmt 0 view .LVU561
 1586 02e8 FC01      		movw r30,r24
 1587               	.LVL229:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1588               		.loc 1 607 22 view .LVU562
 1589 02ea 8191      		ld r24,Z+
 1590               	.LVL230:
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1591               		.loc 1 607 20 view .LVU563
 1592 02ec 8093 F100 		sts 241,r24
 607:usb_serial.c  **** 			case  4: UEDATX = *buffer++;
 1593               		.loc 1 607 29 view .LVU564
 1594 02f0 CF01      		movw r24,r30
 1595               	.LVL231:
 1596               	.L126:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1597               		.loc 1 608 13 is_stmt 1 view .LVU565
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1598               		.loc 1 608 29 is_stmt 0 view .LVU566
 1599 02f2 FC01      		movw r30,r24
 1600               	.LVL232:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1601               		.loc 1 608 22 view .LVU567
 1602 02f4 8191      		ld r24,Z+
 1603               	.LVL233:
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1604               		.loc 1 608 20 view .LVU568
 1605 02f6 8093 F100 		sts 241,r24
 608:usb_serial.c  **** 			case  3: UEDATX = *buffer++;
 1606               		.loc 1 608 29 view .LVU569
 1607 02fa CF01      		movw r24,r30
 1608               	.LVL234:
 1609               	.L127:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1610               		.loc 1 609 13 is_stmt 1 view .LVU570
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1611               		.loc 1 609 29 is_stmt 0 view .LVU571
 1612 02fc FC01      		movw r30,r24
 1613               	.LVL235:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1614               		.loc 1 609 22 view .LVU572
 1615 02fe 8191      		ld r24,Z+
 1616               	.LVL236:
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1617               		.loc 1 609 20 view .LVU573
 1618 0300 8093 F100 		sts 241,r24
 609:usb_serial.c  **** 			case  2: UEDATX = *buffer++;
 1619               		.loc 1 609 29 view .LVU574
 1620 0304 CF01      		movw r24,r30
 1621               	.LVL237:
 1622               	.L128:
 610:usb_serial.c  **** 			default:
 1623               		.loc 1 610 13 is_stmt 1 view .LVU575
 610:usb_serial.c  **** 			default:
 1624               		.loc 1 610 29 is_stmt 0 view .LVU576
 1625 0306 FC01      		movw r30,r24
 1626               	.LVL238:
 610:usb_serial.c  **** 			default:
 1627               		.loc 1 610 22 view .LVU577
 1628 0308 8191      		ld r24,Z+
 1629               	.LVL239:
 610:usb_serial.c  **** 			default:
 1630               		.loc 1 610 20 view .LVU578
 1631 030a 8093 F100 		sts 241,r24
 610:usb_serial.c  **** 			default:
 1632               		.loc 1 610 29 view .LVU579
 1633 030e CF01      		movw r24,r30
 1634               	.LVL240:
 1635               	.L64:
 612:usb_serial.c  **** 			case  0: break;
 1636               		.loc 1 612 13 is_stmt 1 view .LVU580
 612:usb_serial.c  **** 			case  0: break;
 1637               		.loc 1 612 29 is_stmt 0 view .LVU581
 1638 0310 FC01      		movw r30,r24
 1639               	.LVL241:
 612:usb_serial.c  **** 			case  0: break;
 1640               		.loc 1 612 22 view .LVU582
 1641 0312 8191      		ld r24,Z+
 1642               	.LVL242:
 612:usb_serial.c  **** 			case  0: break;
 1643               		.loc 1 612 20 view .LVU583
 1644 0314 8093 F100 		sts 241,r24
 612:usb_serial.c  **** 			case  0: break;
 1645               		.loc 1 612 29 view .LVU584
 1646 0318 CF01      		movw r24,r30
 1647               	.LVL243:
 1648               	.L129:
 613:usb_serial.c  **** 		}
 1649               		.loc 1 613 13 is_stmt 1 view .LVU585
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1650               		.loc 1 616 3 view .LVU586
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1651               		.loc 1 616 9 is_stmt 0 view .LVU587
 1652 031a E091 E800 		lds r30,232
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1653               		.loc 1 616 6 view .LVU588
 1654 031e E5FF      		sbrs r30,5
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1655               		.loc 1 616 30 is_stmt 1 discriminator 1 view .LVU589
 616:usb_serial.c  **** 		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 1656               		.loc 1 616 37 is_stmt 0 discriminator 1 view .LVU590
 1657 0320 5093 E800 		sts 232,r21
 1658               	.L130:
 617:usb_serial.c  **** 		SREG = intr_state;
 1659               		.loc 1 617 3 is_stmt 1 view .LVU591
 617:usb_serial.c  **** 		SREG = intr_state;
 1660               		.loc 1 617 24 is_stmt 0 view .LVU592
 1661 0324 A093 0000 		sts transmit_flush_timer,r26
 618:usb_serial.c  **** 	}
 1662               		.loc 1 618 3 is_stmt 1 view .LVU593
 618:usb_serial.c  **** 	}
 1663               		.loc 1 618 8 is_stmt 0 view .LVU594
 1664 0328 2FBF      		out __SREG__,r18
 1665 032a 00C0      		rjmp .L58
 1666               		.cfi_endproc
 1667               	.LFE8:
 1669               		.section	.text.usb_serial_flush_output,"ax",@progbits
 1670               	.global	usb_serial_flush_output
 1672               	usb_serial_flush_output:
 1673               	.LFB9:
 629:usb_serial.c  **** 	uint8_t intr_state;
 1674               		.loc 1 629 1 is_stmt 1 view -0
 1675               		.cfi_startproc
 1676               	/* prologue: function */
 1677               	/* frame size = 0 */
 1678               	/* stack size = 0 */
 1679               	.L__stack_usage = 0
 630:usb_serial.c  **** 
 1680               		.loc 1 630 2 view .LVU596
 632:usb_serial.c  **** 	cli();
 1681               		.loc 1 632 2 view .LVU597
 632:usb_serial.c  **** 	cli();
 1682               		.loc 1 632 13 is_stmt 0 view .LVU598
 1683 0000 8FB7      		in r24,__SREG__
 1684               	.LVL244:
 633:usb_serial.c  **** 	if (transmit_flush_timer) {
 1685               		.loc 1 633 2 is_stmt 1 view .LVU599
 1686               	/* #APP */
 1687               	 ;  633 "usb_serial.c" 1
 1688 0002 F894      		cli
 1689               	 ;  0 "" 2
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1690               		.loc 1 634 2 view .LVU600
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1691               		.loc 1 634 6 is_stmt 0 view .LVU601
 1692               	/* #NOAPP */
 1693 0004 9091 0000 		lds r25,transmit_flush_timer
 634:usb_serial.c  **** 		UENUM = CDC_TX_ENDPOINT;
 1694               		.loc 1 634 5 view .LVU602
 1695 0008 9923      		tst r25
 1696 000a 01F0      		breq .L140
 635:usb_serial.c  **** 		UEINTX = 0x3A;
 1697               		.loc 1 635 3 is_stmt 1 view .LVU603
 635:usb_serial.c  **** 		UEINTX = 0x3A;
 1698               		.loc 1 635 9 is_stmt 0 view .LVU604
 1699 000c 94E0      		ldi r25,lo8(4)
 1700 000e 9093 E900 		sts 233,r25
 636:usb_serial.c  **** 		transmit_flush_timer = 0;
 1701               		.loc 1 636 3 is_stmt 1 view .LVU605
 636:usb_serial.c  **** 		transmit_flush_timer = 0;
 1702               		.loc 1 636 10 is_stmt 0 view .LVU606
 1703 0012 9AE3      		ldi r25,lo8(58)
 1704 0014 9093 E800 		sts 232,r25
 637:usb_serial.c  **** 	}
 1705               		.loc 1 637 3 is_stmt 1 view .LVU607
 637:usb_serial.c  **** 	}
 1706               		.loc 1 637 24 is_stmt 0 view .LVU608
 1707 0018 1092 0000 		sts transmit_flush_timer,__zero_reg__
 1708               	.L140:
 639:usb_serial.c  **** }
 1709               		.loc 1 639 2 is_stmt 1 view .LVU609
 639:usb_serial.c  **** }
 1710               		.loc 1 639 7 is_stmt 0 view .LVU610
 1711 001c 8FBF      		out __SREG__,r24
 1712               	/* epilogue start */
 640:usb_serial.c  **** 
 1713               		.loc 1 640 1 view .LVU611
 1714 001e 0895      		ret
 1715               		.cfi_endproc
 1716               	.LFE9:
 1718               		.section	.text.usb_serial_get_baud,"ax",@progbits
 1719               	.global	usb_serial_get_baud
 1721               	usb_serial_get_baud:
 1722               	.LFB10:
 648:usb_serial.c  **** 	return *(uint32_t *)cdc_line_coding;
 1723               		.loc 1 648 1 is_stmt 1 view -0
 1724               		.cfi_startproc
 1725               	/* prologue: function */
 1726               	/* frame size = 0 */
 1727               	/* stack size = 0 */
 1728               	.L__stack_usage = 0
 649:usb_serial.c  **** }
 1729               		.loc 1 649 2 view .LVU613
 649:usb_serial.c  **** }
 1730               		.loc 1 649 9 is_stmt 0 view .LVU614
 1731 0000 6091 0000 		lds r22,cdc_line_coding
 1732 0004 7091 0000 		lds r23,cdc_line_coding+1
 1733 0008 8091 0000 		lds r24,cdc_line_coding+2
 1734 000c 9091 0000 		lds r25,cdc_line_coding+3
 1735               	/* epilogue start */
 650:usb_serial.c  **** uint8_t usb_serial_get_stopbits(void)
 1736               		.loc 1 650 1 view .LVU615
 1737 0010 0895      		ret
 1738               		.cfi_endproc
 1739               	.LFE10:
 1741               		.section	.text.usb_serial_get_stopbits,"ax",@progbits
 1742               	.global	usb_serial_get_stopbits
 1744               	usb_serial_get_stopbits:
 1745               	.LFB11:
 652:usb_serial.c  **** 	return cdc_line_coding[4];
 1746               		.loc 1 652 1 is_stmt 1 view -0
 1747               		.cfi_startproc
 1748               	/* prologue: function */
 1749               	/* frame size = 0 */
 1750               	/* stack size = 0 */
 1751               	.L__stack_usage = 0
 653:usb_serial.c  **** }
 1752               		.loc 1 653 2 view .LVU617
 654:usb_serial.c  **** uint8_t usb_serial_get_paritytype(void)
 1753               		.loc 1 654 1 is_stmt 0 view .LVU618
 1754 0000 8091 0000 		lds r24,cdc_line_coding+4
 1755               	/* epilogue start */
 1756 0004 0895      		ret
 1757               		.cfi_endproc
 1758               	.LFE11:
 1760               		.section	.text.usb_serial_get_paritytype,"ax",@progbits
 1761               	.global	usb_serial_get_paritytype
 1763               	usb_serial_get_paritytype:
 1764               	.LFB12:
 656:usb_serial.c  **** 	return cdc_line_coding[5];
 1765               		.loc 1 656 1 is_stmt 1 view -0
 1766               		.cfi_startproc
 1767               	/* prologue: function */
 1768               	/* frame size = 0 */
 1769               	/* stack size = 0 */
 1770               	.L__stack_usage = 0
 657:usb_serial.c  **** }
 1771               		.loc 1 657 2 view .LVU620
 658:usb_serial.c  **** uint8_t usb_serial_get_numbits(void)
 1772               		.loc 1 658 1 is_stmt 0 view .LVU621
 1773 0000 8091 0000 		lds r24,cdc_line_coding+5
 1774               	/* epilogue start */
 1775 0004 0895      		ret
 1776               		.cfi_endproc
 1777               	.LFE12:
 1779               		.section	.text.usb_serial_get_numbits,"ax",@progbits
 1780               	.global	usb_serial_get_numbits
 1782               	usb_serial_get_numbits:
 1783               	.LFB13:
 660:usb_serial.c  **** 	return cdc_line_coding[6];
 1784               		.loc 1 660 1 is_stmt 1 view -0
 1785               		.cfi_startproc
 1786               	/* prologue: function */
 1787               	/* frame size = 0 */
 1788               	/* stack size = 0 */
 1789               	.L__stack_usage = 0
 661:usb_serial.c  **** }
 1790               		.loc 1 661 2 view .LVU623
 662:usb_serial.c  **** uint8_t usb_serial_get_control(void)
 1791               		.loc 1 662 1 is_stmt 0 view .LVU624
 1792 0000 8091 0000 		lds r24,cdc_line_coding+6
 1793               	/* epilogue start */
 1794 0004 0895      		ret
 1795               		.cfi_endproc
 1796               	.LFE13:
 1798               		.section	.text.usb_serial_get_control,"ax",@progbits
 1799               	.global	usb_serial_get_control
 1801               	usb_serial_get_control:
 1802               	.LFB14:
 664:usb_serial.c  **** 	return cdc_line_rtsdtr;
 1803               		.loc 1 664 1 is_stmt 1 view -0
 1804               		.cfi_startproc
 1805               	/* prologue: function */
 1806               	/* frame size = 0 */
 1807               	/* stack size = 0 */
 1808               	.L__stack_usage = 0
 665:usb_serial.c  **** }
 1809               		.loc 1 665 2 view .LVU626
 666:usb_serial.c  **** // write the control signals, DCD, DSR, RI, etc
 1810               		.loc 1 666 1 is_stmt 0 view .LVU627
 1811 0000 8091 0000 		lds r24,cdc_line_rtsdtr
 1812               	/* epilogue start */
 1813 0004 0895      		ret
 1814               		.cfi_endproc
 1815               	.LFE14:
 1817               		.section	.text.usb_serial_set_control,"ax",@progbits
 1818               	.global	usb_serial_set_control
 1820               	usb_serial_set_control:
 1821               	.LVL245:
 1822               	.LFB15:
 674:usb_serial.c  **** 	uint8_t intr_state;
 1823               		.loc 1 674 1 is_stmt 1 view -0
 1824               		.cfi_startproc
 1825               	/* prologue: function */
 1826               	/* frame size = 0 */
 1827               	/* stack size = 0 */
 1828               	.L__stack_usage = 0
 675:usb_serial.c  **** 
 1829               		.loc 1 675 2 view .LVU629
 677:usb_serial.c  **** 	cli();
 1830               		.loc 1 677 2 view .LVU630
 677:usb_serial.c  **** 	cli();
 1831               		.loc 1 677 13 is_stmt 0 view .LVU631
 1832 0000 9FB7      		in r25,__SREG__
 1833               	.LVL246:
 678:usb_serial.c  **** 	if (!usb_configuration) {
 1834               		.loc 1 678 2 is_stmt 1 view .LVU632
 1835               	/* #APP */
 1836               	 ;  678 "usb_serial.c" 1
 1837 0002 F894      		cli
 1838               	 ;  0 "" 2
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1839               		.loc 1 679 2 view .LVU633
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1840               		.loc 1 679 6 is_stmt 0 view .LVU634
 1841               	/* #NOAPP */
 1842 0004 2091 0000 		lds r18,usb_configuration
 679:usb_serial.c  **** 		// we're not enumerated/configured
 1843               		.loc 1 679 5 view .LVU635
 1844 0008 2111      		cpse r18,__zero_reg__
 1845 000a 00C0      		rjmp .L150
 1846               	.L153:
 690:usb_serial.c  **** 		return -1;
 1847               		.loc 1 690 3 is_stmt 1 view .LVU636
 690:usb_serial.c  **** 		return -1;
 1848               		.loc 1 690 8 is_stmt 0 view .LVU637
 1849 000c 9FBF      		out __SREG__,r25
 691:usb_serial.c  **** 	}
 1850               		.loc 1 691 3 is_stmt 1 view .LVU638
 691:usb_serial.c  **** 	}
 1851               		.loc 1 691 10 is_stmt 0 view .LVU639
 1852 000e 8FEF      		ldi r24,lo8(-1)
 1853               	.LVL247:
 691:usb_serial.c  **** 	}
 1854               		.loc 1 691 10 view .LVU640
 1855 0010 0895      		ret
 1856               	.LVL248:
 1857               	.L150:
 685:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 1858               		.loc 1 685 2 is_stmt 1 view .LVU641
 685:usb_serial.c  **** 	if (!(UEINTX & (1<<RWAL))) {
 1859               		.loc 1 685 8 is_stmt 0 view .LVU642
 1860 0012 22E0      		ldi r18,lo8(2)
 1861 0014 2093 E900 		sts 233,r18
 686:usb_serial.c  **** 		// unable to write
 1862               		.loc 1 686 2 is_stmt 1 view .LVU643
 686:usb_serial.c  **** 		// unable to write
 1863               		.loc 1 686 8 is_stmt 0 view .LVU644
 1864 0018 2091 E800 		lds r18,232
 686:usb_serial.c  **** 		// unable to write
 1865               		.loc 1 686 5 view .LVU645
 1866 001c 25FF      		sbrs r18,5
 1867 001e 00C0      		rjmp .L153
 693:usb_serial.c  **** 	UEDATX = 0x20;
 1868               		.loc 1 693 2 is_stmt 1 view .LVU646
 693:usb_serial.c  **** 	UEDATX = 0x20;
 1869               		.loc 1 693 9 is_stmt 0 view .LVU647
 1870 0020 21EA      		ldi r18,lo8(-95)
 1871 0022 2093 F100 		sts 241,r18
 694:usb_serial.c  **** 	UEDATX = 0;
 1872               		.loc 1 694 2 is_stmt 1 view .LVU648
 694:usb_serial.c  **** 	UEDATX = 0;
 1873               		.loc 1 694 9 is_stmt 0 view .LVU649
 1874 0026 20E2      		ldi r18,lo8(32)
 1875 0028 2093 F100 		sts 241,r18
 695:usb_serial.c  **** 	UEDATX = 0;
 1876               		.loc 1 695 2 is_stmt 1 view .LVU650
 695:usb_serial.c  **** 	UEDATX = 0;
 1877               		.loc 1 695 9 is_stmt 0 view .LVU651
 1878 002c 1092 F100 		sts 241,__zero_reg__
 696:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 1879               		.loc 1 696 2 is_stmt 1 view .LVU652
 696:usb_serial.c  **** 	UEDATX = 0; // 0 seems to work nicely.  what if this is 1??
 1880               		.loc 1 696 9 is_stmt 0 view .LVU653
 1881 0030 1092 F100 		sts 241,__zero_reg__
 697:usb_serial.c  **** 	UEDATX = 0;
 1882               		.loc 1 697 2 is_stmt 1 view .LVU654
 697:usb_serial.c  **** 	UEDATX = 0;
 1883               		.loc 1 697 9 is_stmt 0 view .LVU655
 1884 0034 1092 F100 		sts 241,__zero_reg__
 698:usb_serial.c  **** 	UEDATX = 1;
 1885               		.loc 1 698 2 is_stmt 1 view .LVU656
 698:usb_serial.c  **** 	UEDATX = 1;
 1886               		.loc 1 698 9 is_stmt 0 view .LVU657
 1887 0038 1092 F100 		sts 241,__zero_reg__
 699:usb_serial.c  **** 	UEDATX = 0;
 1888               		.loc 1 699 2 is_stmt 1 view .LVU658
 699:usb_serial.c  **** 	UEDATX = 0;
 1889               		.loc 1 699 9 is_stmt 0 view .LVU659
 1890 003c 21E0      		ldi r18,lo8(1)
 1891 003e 2093 F100 		sts 241,r18
 700:usb_serial.c  **** 	UEDATX = signals;
 1892               		.loc 1 700 2 is_stmt 1 view .LVU660
 700:usb_serial.c  **** 	UEDATX = signals;
 1893               		.loc 1 700 9 is_stmt 0 view .LVU661
 1894 0042 1092 F100 		sts 241,__zero_reg__
 701:usb_serial.c  **** 	UEINTX = 0x3A;
 1895               		.loc 1 701 2 is_stmt 1 view .LVU662
 701:usb_serial.c  **** 	UEINTX = 0x3A;
 1896               		.loc 1 701 9 is_stmt 0 view .LVU663
 1897 0046 8093 F100 		sts 241,r24
 702:usb_serial.c  **** 	SREG = intr_state;
 1898               		.loc 1 702 2 is_stmt 1 view .LVU664
 702:usb_serial.c  **** 	SREG = intr_state;
 1899               		.loc 1 702 9 is_stmt 0 view .LVU665
 1900 004a 8AE3      		ldi r24,lo8(58)
 1901               	.LVL249:
 702:usb_serial.c  **** 	SREG = intr_state;
 1902               		.loc 1 702 9 view .LVU666
 1903 004c 8093 E800 		sts 232,r24
 1904               	.LVL250:
 703:usb_serial.c  **** 	return 0;
 1905               		.loc 1 703 2 is_stmt 1 view .LVU667
 703:usb_serial.c  **** 	return 0;
 1906               		.loc 1 703 7 is_stmt 0 view .LVU668
 1907 0050 9FBF      		out __SREG__,r25
 704:usb_serial.c  **** }
 1908               		.loc 1 704 2 is_stmt 1 view .LVU669
 704:usb_serial.c  **** }
 1909               		.loc 1 704 9 is_stmt 0 view .LVU670
 1910 0052 80E0      		ldi r24,0
 1911               	/* epilogue start */
 705:usb_serial.c  **** 
 1912               		.loc 1 705 1 view .LVU671
 1913 0054 0895      		ret
 1914               		.cfi_endproc
 1915               	.LFE15:
 1917               		.section	.text.__vector_10,"ax",@progbits
 1918               	.global	__vector_10
 1920               	__vector_10:
 1921               	.LFB16:
 720:usb_serial.c  **** 	uint8_t intbits, t;
 1922               		.loc 1 720 1 is_stmt 1 view -0
 1923               		.cfi_startproc
 1924 0000 1F92 1FB6 		__gcc_isr 1
 1924      1F92 1124 
 1924      8F93 
 1925 000a 9F93      		push r25
 1926               	.LCFI0:
 1927               		.cfi_def_cfa_offset 3
 1928               		.cfi_offset 25, -2
 1929               	/* prologue: Signal */
 1930               	/* frame size = 0 */
 1931               	/* stack size = 1...5 */
 1932               	.L__stack_usage = 1 + __gcc_isr.n_pushed
 721:usb_serial.c  **** 
 1933               		.loc 1 721 2 view .LVU673
 723:usb_serial.c  ****         UDINT = 0;
 1934               		.loc 1 723 9 view .LVU674
 723:usb_serial.c  ****         UDINT = 0;
 1935               		.loc 1 723 17 is_stmt 0 view .LVU675
 1936 000c 8091 E100 		lds r24,225
 1937               	.LVL251:
 724:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 1938               		.loc 1 724 9 is_stmt 1 view .LVU676
 724:usb_serial.c  ****         if (intbits & (1<<EORSTI)) {
 1939               		.loc 1 724 15 is_stmt 0 view .LVU677
 1940 0010 1092 E100 		sts 225,__zero_reg__
 725:usb_serial.c  **** 		UENUM = 0;
 1941               		.loc 1 725 9 is_stmt 1 view .LVU678
 725:usb_serial.c  **** 		UENUM = 0;
 1942               		.loc 1 725 12 is_stmt 0 view .LVU679
 1943 0014 83FF      		sbrs r24,3
 1944 0016 00C0      		rjmp .L155
 726:usb_serial.c  **** 		UECONX = 1;
 1945               		.loc 1 726 3 is_stmt 1 view .LVU680
 726:usb_serial.c  **** 		UECONX = 1;
 1946               		.loc 1 726 9 is_stmt 0 view .LVU681
 1947 0018 1092 E900 		sts 233,__zero_reg__
 727:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 1948               		.loc 1 727 3 is_stmt 1 view .LVU682
 727:usb_serial.c  **** 		UECFG0X = EP_TYPE_CONTROL;
 1949               		.loc 1 727 10 is_stmt 0 view .LVU683
 1950 001c 91E0      		ldi r25,lo8(1)
 1951 001e 9093 EB00 		sts 235,r25
 728:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 1952               		.loc 1 728 3 is_stmt 1 view .LVU684
 728:usb_serial.c  **** 		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 1953               		.loc 1 728 11 is_stmt 0 view .LVU685
 1954 0022 1092 EC00 		sts 236,__zero_reg__
 729:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 1955               		.loc 1 729 3 is_stmt 1 view .LVU686
 729:usb_serial.c  **** 		UEIENX = (1<<RXSTPE);
 1956               		.loc 1 729 11 is_stmt 0 view .LVU687
 1957 0026 92E1      		ldi r25,lo8(18)
 1958 0028 9093 ED00 		sts 237,r25
 730:usb_serial.c  **** 		usb_configuration = 0;
 1959               		.loc 1 730 3 is_stmt 1 view .LVU688
 730:usb_serial.c  **** 		usb_configuration = 0;
 1960               		.loc 1 730 10 is_stmt 0 view .LVU689
 1961 002c 98E0      		ldi r25,lo8(8)
 1962 002e 9093 F000 		sts 240,r25
 731:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 1963               		.loc 1 731 3 is_stmt 1 view .LVU690
 731:usb_serial.c  **** 		cdc_line_rtsdtr = 0;
 1964               		.loc 1 731 21 is_stmt 0 view .LVU691
 1965 0032 1092 0000 		sts usb_configuration,__zero_reg__
 732:usb_serial.c  ****         }
 1966               		.loc 1 732 3 is_stmt 1 view .LVU692
 732:usb_serial.c  ****         }
 1967               		.loc 1 732 19 is_stmt 0 view .LVU693
 1968 0036 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 1969               	.L155:
 734:usb_serial.c  **** 		if (usb_configuration) {
 1970               		.loc 1 734 2 is_stmt 1 view .LVU694
 734:usb_serial.c  **** 		if (usb_configuration) {
 1971               		.loc 1 734 5 is_stmt 0 view .LVU695
 1972 003a 82FF      		sbrs r24,2
 1973 003c 00C0      		rjmp .L154
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 1974               		.loc 1 735 3 is_stmt 1 view .LVU696
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 1975               		.loc 1 735 7 is_stmt 0 view .LVU697
 1976 003e 8091 0000 		lds r24,usb_configuration
 1977               	.LVL252:
 735:usb_serial.c  **** 			t = transmit_flush_timer;
 1978               		.loc 1 735 6 view .LVU698
 1979 0042 8823      		tst r24
 1980 0044 01F0      		breq .L154
 736:usb_serial.c  **** 			if (t) {
 1981               		.loc 1 736 4 is_stmt 1 view .LVU699
 736:usb_serial.c  **** 			if (t) {
 1982               		.loc 1 736 6 is_stmt 0 view .LVU700
 1983 0046 8091 0000 		lds r24,transmit_flush_timer
 1984               	.LVL253:
 737:usb_serial.c  **** 				transmit_flush_timer = --t;
 1985               		.loc 1 737 4 is_stmt 1 view .LVU701
 737:usb_serial.c  **** 				transmit_flush_timer = --t;
 1986               		.loc 1 737 7 is_stmt 0 view .LVU702
 1987 004a 8823      		tst r24
 1988 004c 01F0      		breq .L154
 738:usb_serial.c  **** 				if (!t) {
 1989               		.loc 1 738 5 is_stmt 1 view .LVU703
 738:usb_serial.c  **** 				if (!t) {
 1990               		.loc 1 738 26 is_stmt 0 view .LVU704
 1991 004e 8150      		subi r24,lo8(-(-1))
 1992               	.LVL254:
 738:usb_serial.c  **** 				if (!t) {
 1993               		.loc 1 738 26 view .LVU705
 1994 0050 8093 0000 		sts transmit_flush_timer,r24
 739:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 1995               		.loc 1 739 5 is_stmt 1 view .LVU706
 739:usb_serial.c  **** 					UENUM = CDC_TX_ENDPOINT;
 1996               		.loc 1 739 8 is_stmt 0 view .LVU707
 1997 0054 8111      		cpse r24,__zero_reg__
 1998 0056 00C0      		rjmp .L154
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 1999               		.loc 1 740 6 is_stmt 1 view .LVU708
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 2000               		.loc 1 740 12 is_stmt 0 view .LVU709
 2001 0058 84E0      		ldi r24,lo8(4)
 2002               	.LVL255:
 740:usb_serial.c  **** 					UEINTX = 0x3A;
 2003               		.loc 1 740 12 view .LVU710
 2004 005a 8093 E900 		sts 233,r24
 2005               	.LVL256:
 741:usb_serial.c  **** 				}
 2006               		.loc 1 741 6 is_stmt 1 view .LVU711
 741:usb_serial.c  **** 				}
 2007               		.loc 1 741 13 is_stmt 0 view .LVU712
 2008 005e 8AE3      		ldi r24,lo8(58)
 2009 0060 8093 E800 		sts 232,r24
 2010               	.L154:
 2011               	/* epilogue start */
 746:usb_serial.c  **** 
 2012               		.loc 1 746 1 view .LVU713
 2013 0064 9F91      		pop r25
 2014 0066 8F91 1F90 		__gcc_isr 2
 2014      1FBE 1F90 
 2015 006e 1895      		reti
 2016               		__gcc_isr 0,r24
 2017               		.cfi_endproc
 2018               	.LFE16:
 2020               		.section	.text.__vector_11,"ax",@progbits
 2021               	.global	__vector_11
 2023               	__vector_11:
 2024               	.LFB21:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 755:usb_serial.c  **** {
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 757:usb_serial.c  **** }
 758:usb_serial.c  **** static inline void usb_wait_receive_out(void)
 759:usb_serial.c  **** {
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 761:usb_serial.c  **** }
 762:usb_serial.c  **** static inline void usb_ack_out(void)
 763:usb_serial.c  **** {
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 765:usb_serial.c  **** }
 766:usb_serial.c  **** 
 767:usb_serial.c  **** 
 768:usb_serial.c  **** 
 769:usb_serial.c  **** // USB Endpoint Interrupt - endpoint 0 is handled here.  The
 770:usb_serial.c  **** // other endpoints are manipulated by the user-callable
 771:usb_serial.c  **** // functions, and the start-of-frame interrupt.
 772:usb_serial.c  **** //
 773:usb_serial.c  **** ISR(USB_COM_vect)
 774:usb_serial.c  **** {
 2025               		.loc 1 774 1 is_stmt 1 view -0
 2026               		.cfi_startproc
 2027 0000 1F92      		push r1
 2028               	.LCFI1:
 2029               		.cfi_def_cfa_offset 3
 2030               		.cfi_offset 1, -2
 2031 0002 0F92      		push r0
 2032               	.LCFI2:
 2033               		.cfi_def_cfa_offset 4
 2034               		.cfi_offset 0, -3
 2035 0004 0FB6      		in r0,__SREG__
 2036 0006 0F92      		push r0
 2037 0008 1124      		clr __zero_reg__
 2038 000a EF92      		push r14
 2039               	.LCFI3:
 2040               		.cfi_def_cfa_offset 5
 2041               		.cfi_offset 14, -4
 2042 000c FF92      		push r15
 2043               	.LCFI4:
 2044               		.cfi_def_cfa_offset 6
 2045               		.cfi_offset 15, -5
 2046 000e 0F93      		push r16
 2047               	.LCFI5:
 2048               		.cfi_def_cfa_offset 7
 2049               		.cfi_offset 16, -6
 2050 0010 1F93      		push r17
 2051               	.LCFI6:
 2052               		.cfi_def_cfa_offset 8
 2053               		.cfi_offset 17, -7
 2054 0012 2F93      		push r18
 2055               	.LCFI7:
 2056               		.cfi_def_cfa_offset 9
 2057               		.cfi_offset 18, -8
 2058 0014 3F93      		push r19
 2059               	.LCFI8:
 2060               		.cfi_def_cfa_offset 10
 2061               		.cfi_offset 19, -9
 2062 0016 4F93      		push r20
 2063               	.LCFI9:
 2064               		.cfi_def_cfa_offset 11
 2065               		.cfi_offset 20, -10
 2066 0018 5F93      		push r21
 2067               	.LCFI10:
 2068               		.cfi_def_cfa_offset 12
 2069               		.cfi_offset 21, -11
 2070 001a 6F93      		push r22
 2071               	.LCFI11:
 2072               		.cfi_def_cfa_offset 13
 2073               		.cfi_offset 22, -12
 2074 001c 7F93      		push r23
 2075               	.LCFI12:
 2076               		.cfi_def_cfa_offset 14
 2077               		.cfi_offset 23, -13
 2078 001e 8F93      		push r24
 2079               	.LCFI13:
 2080               		.cfi_def_cfa_offset 15
 2081               		.cfi_offset 24, -14
 2082 0020 9F93      		push r25
 2083               	.LCFI14:
 2084               		.cfi_def_cfa_offset 16
 2085               		.cfi_offset 25, -15
 2086 0022 AF93      		push r26
 2087               	.LCFI15:
 2088               		.cfi_def_cfa_offset 17
 2089               		.cfi_offset 26, -16
 2090 0024 BF93      		push r27
 2091               	.LCFI16:
 2092               		.cfi_def_cfa_offset 18
 2093               		.cfi_offset 27, -17
 2094 0026 CF93      		push r28
 2095               	.LCFI17:
 2096               		.cfi_def_cfa_offset 19
 2097               		.cfi_offset 28, -18
 2098 0028 DF93      		push r29
 2099               	.LCFI18:
 2100               		.cfi_def_cfa_offset 20
 2101               		.cfi_offset 29, -19
 2102 002a EF93      		push r30
 2103               	.LCFI19:
 2104               		.cfi_def_cfa_offset 21
 2105               		.cfi_offset 30, -20
 2106 002c FF93      		push r31
 2107               	.LCFI20:
 2108               		.cfi_def_cfa_offset 22
 2109               		.cfi_offset 31, -21
 2110               	/* prologue: Signal */
 2111               	/* frame size = 0 */
 2112               	/* stack size = 21 */
 2113               	.L__stack_usage = 21
 775:usb_serial.c  ****         uint8_t intbits;
 2114               		.loc 1 775 9 view .LVU715
 776:usb_serial.c  **** 	const uint8_t *list;
 2115               		.loc 1 776 2 view .LVU716
 777:usb_serial.c  ****         const uint8_t *cfg;
 2116               		.loc 1 777 9 view .LVU717
 778:usb_serial.c  **** 	uint8_t i, n, len, en;
 2117               		.loc 1 778 2 view .LVU718
 779:usb_serial.c  **** 	uint8_t *p;
 2118               		.loc 1 779 2 view .LVU719
 780:usb_serial.c  **** 	uint8_t bmRequestType;
 2119               		.loc 1 780 2 view .LVU720
 781:usb_serial.c  **** 	uint8_t bRequest;
 2120               		.loc 1 781 2 view .LVU721
 782:usb_serial.c  **** 	uint16_t wValue;
 2121               		.loc 1 782 2 view .LVU722
 783:usb_serial.c  **** 	uint16_t wIndex;
 2122               		.loc 1 783 2 view .LVU723
 784:usb_serial.c  **** 	uint16_t wLength;
 2123               		.loc 1 784 2 view .LVU724
 785:usb_serial.c  **** 	uint16_t desc_val;
 2124               		.loc 1 785 2 view .LVU725
 786:usb_serial.c  **** 	const uint8_t *desc_addr;
 2125               		.loc 1 786 2 view .LVU726
 787:usb_serial.c  **** 	uint8_t	desc_length;
 2126               		.loc 1 787 2 view .LVU727
 788:usb_serial.c  **** 
 789:usb_serial.c  ****         UENUM = 0;
 2127               		.loc 1 789 9 view .LVU728
 2128               		.loc 1 789 15 is_stmt 0 view .LVU729
 2129 002e 1092 E900 		sts 233,__zero_reg__
 790:usb_serial.c  ****         intbits = UEINTX;
 2130               		.loc 1 790 9 is_stmt 1 view .LVU730
 2131               		.loc 1 790 17 is_stmt 0 view .LVU731
 2132 0032 8091 E800 		lds r24,232
 2133               	.LVL257:
 791:usb_serial.c  ****         if (intbits & (1<<RXSTPI)) {
 2134               		.loc 1 791 9 is_stmt 1 view .LVU732
 2135               		.loc 1 791 12 is_stmt 0 view .LVU733
 2136 0036 83FF      		sbrs r24,3
 2137 0038 00C0      		rjmp .L169
 792:usb_serial.c  ****                 bmRequestType = UEDATX;
 2138               		.loc 1 792 17 is_stmt 1 view .LVU734
 2139               		.loc 1 792 31 is_stmt 0 view .LVU735
 2140 003a D091 F100 		lds r29,241
 2141               	.LVL258:
 793:usb_serial.c  ****                 bRequest = UEDATX;
 2142               		.loc 1 793 17 is_stmt 1 view .LVU736
 2143               		.loc 1 793 26 is_stmt 0 view .LVU737
 2144 003e C091 F100 		lds r28,241
 2145               	.LVL259:
 794:usb_serial.c  ****                 wValue = UEDATX;
 2146               		.loc 1 794 17 is_stmt 1 view .LVU738
 2147               		.loc 1 794 26 is_stmt 0 view .LVU739
 2148 0042 E090 F100 		lds r14,241
 2149               	.LVL260:
 795:usb_serial.c  ****                 wValue |= (UEDATX << 8);
 2150               		.loc 1 795 17 is_stmt 1 view .LVU740
 2151               		.loc 1 795 28 is_stmt 0 view .LVU741
 2152 0046 8091 F100 		lds r24,241
 2153               	.LVL261:
 2154               		.loc 1 795 24 view .LVU742
 2155 004a F82E      		mov r15,r24
 2156               	.LVL262:
 796:usb_serial.c  ****                 wIndex = UEDATX;
 2157               		.loc 1 796 17 is_stmt 1 view .LVU743
 2158               		.loc 1 796 26 is_stmt 0 view .LVU744
 2159 004c 0091 F100 		lds r16,241
 2160               	.LVL263:
 797:usb_serial.c  ****                 wIndex |= (UEDATX << 8);
 2161               		.loc 1 797 17 is_stmt 1 view .LVU745
 2162               		.loc 1 797 28 is_stmt 0 view .LVU746
 2163 0050 8091 F100 		lds r24,241
 2164               		.loc 1 797 24 view .LVU747
 2165 0054 182F      		mov r17,r24
 2166               	.LVL264:
 798:usb_serial.c  ****                 wLength = UEDATX;
 2167               		.loc 1 798 17 is_stmt 1 view .LVU748
 2168               		.loc 1 798 27 is_stmt 0 view .LVU749
 2169 0056 8091 F100 		lds r24,241
 2170               	.LVL265:
 799:usb_serial.c  ****                 wLength |= (UEDATX << 8);
 2171               		.loc 1 799 17 is_stmt 1 view .LVU750
 2172               		.loc 1 799 29 is_stmt 0 view .LVU751
 2173 005a 9091 F100 		lds r25,241
 2174               	.LVL266:
 800:usb_serial.c  ****                 UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 2175               		.loc 1 800 17 is_stmt 1 view .LVU752
 2176               		.loc 1 800 24 is_stmt 0 view .LVU753
 2177 005e 22EF      		ldi r18,lo8(-14)
 2178 0060 2093 E800 		sts 232,r18
 801:usb_serial.c  ****                 if (bRequest == GET_DESCRIPTOR) {
 2179               		.loc 1 801 17 is_stmt 1 view .LVU754
 2180               		.loc 1 801 20 is_stmt 0 view .LVU755
 2181 0064 C630      		cpi r28,lo8(6)
 2182 0066 01F0      		breq .+2
 2183 0068 00C0      		rjmp .L211
 2184 006a 20E0      		ldi r18,lo8(descriptor_list)
 2185 006c 30E0      		ldi r19,hi8(descriptor_list)
 2186               	.L178:
 2187               	.LVL267:
 802:usb_serial.c  **** 			list = (const uint8_t *)descriptor_list;
 803:usb_serial.c  **** 			for (i=0; ; i++) {
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 805:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 806:usb_serial.c  **** 					return;
 807:usb_serial.c  **** 				}
 808:usb_serial.c  **** 				desc_val = pgm_read_word(list);
 2188               		.loc 1 808 5 is_stmt 1 view .LVU756
 2189               	.LBB60:
 2190               		.loc 1 808 16 view .LVU757
 2191               		.loc 1 808 16 view .LVU758
 2192               		.loc 1 808 16 view .LVU759
 2193 006e F901      		movw r30,r18
 2194               	/* #APP */
 2195               	 ;  808 "usb_serial.c" 1
 2196 0070 4591      		lpm r20, Z+
 2197 0072 5491      		lpm r21, Z
 2198               		
 2199               	 ;  0 "" 2
 2200               	.LVL268:
 2201               		.loc 1 808 16 view .LVU760
 2202               		.loc 1 808 16 is_stmt 0 view .LVU761
 2203               	/* #NOAPP */
 2204               	.LBE60:
 809:usb_serial.c  **** 				if (desc_val != wValue) {
 2205               		.loc 1 809 5 is_stmt 1 view .LVU762
 2206               		.loc 1 809 8 is_stmt 0 view .LVU763
 2207 0074 E416      		cp r14,r20
 2208 0076 F506      		cpc r15,r21
 2209 0078 01F0      		breq .+2
 2210 007a 00C0      		rjmp .L173
 810:usb_serial.c  **** 					list += sizeof(struct descriptor_list_struct);
 811:usb_serial.c  **** 					continue;
 812:usb_serial.c  **** 				}
 813:usb_serial.c  **** 				list += 2;
 2211               		.loc 1 813 5 is_stmt 1 view .LVU764
 2212               	.LVL269:
 814:usb_serial.c  **** 				desc_val = pgm_read_word(list);
 2213               		.loc 1 814 5 view .LVU765
 2214               	.LBB61:
 2215               		.loc 1 814 16 view .LVU766
 2216               		.loc 1 814 16 view .LVU767
 2217               		.loc 1 814 16 view .LVU768
 2218 007c F901      		movw r30,r18
 2219 007e 3296      		adiw r30,2
 2220               	.LVL270:
 2221               		.loc 1 814 16 is_stmt 0 view .LVU769
 2222               	/* #APP */
 2223               	 ;  814 "usb_serial.c" 1
 2224 0080 4591      		lpm r20, Z+
 2225 0082 5491      		lpm r21, Z
 2226               		
 2227               	 ;  0 "" 2
 2228               	.LVL271:
 2229               		.loc 1 814 16 is_stmt 1 view .LVU770
 2230               		.loc 1 814 16 is_stmt 0 view .LVU771
 2231               	/* #NOAPP */
 2232               	.LBE61:
 815:usb_serial.c  **** 				if (desc_val != wIndex) {
 2233               		.loc 1 815 5 is_stmt 1 view .LVU772
 2234               		.loc 1 815 8 is_stmt 0 view .LVU773
 2235 0084 0417      		cp r16,r20
 2236 0086 1507      		cpc r17,r21
 2237 0088 01F0      		breq .+2
 2238 008a 00C0      		rjmp .L173
 816:usb_serial.c  **** 					list += sizeof(struct descriptor_list_struct)-2;
 817:usb_serial.c  **** 					continue;
 818:usb_serial.c  **** 				}
 819:usb_serial.c  **** 				list += 2;
 2239               		.loc 1 819 5 is_stmt 1 view .LVU774
 2240               	.LVL272:
 820:usb_serial.c  **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 2241               		.loc 1 820 5 view .LVU775
 2242               	.LBB62:
 2243               		.loc 1 820 34 view .LVU776
 2244               	.LBE62:
 819:usb_serial.c  **** 				desc_addr = (const uint8_t *)pgm_read_word(list);
 2245               		.loc 1 819 10 is_stmt 0 view .LVU777
 2246 008c F901      		movw r30,r18
 2247 008e 3496      		adiw r30,4
 2248               	.LVL273:
 2249               	.LBB63:
 2250               		.loc 1 820 34 is_stmt 1 view .LVU778
 2251               		.loc 1 820 34 view .LVU779
 2252               	/* #APP */
 2253               	 ;  820 "usb_serial.c" 1
 2254 0090 4591      		lpm r20, Z+
 2255 0092 5491      		lpm r21, Z
 2256               		
 2257               	 ;  0 "" 2
 2258               	.LVL274:
 2259               		.loc 1 820 34 view .LVU780
 2260               		.loc 1 820 34 is_stmt 0 view .LVU781
 2261               	/* #NOAPP */
 2262               	.LBE63:
 821:usb_serial.c  **** 				list += 2;
 2263               		.loc 1 821 5 is_stmt 1 view .LVU782
 822:usb_serial.c  **** 				desc_length = pgm_read_byte(list);
 2264               		.loc 1 822 5 view .LVU783
 2265               	.LBB64:
 2266               		.loc 1 822 19 view .LVU784
 2267               		.loc 1 822 19 view .LVU785
 2268               		.loc 1 822 19 view .LVU786
 2269               	.LBE64:
 821:usb_serial.c  **** 				list += 2;
 2270               		.loc 1 821 10 is_stmt 0 view .LVU787
 2271 0094 F901      		movw r30,r18
 2272 0096 3696      		adiw r30,6
 2273               	.LVL275:
 2274               	.LBB65:
 2275               		.loc 1 822 19 view .LVU788
 2276               	/* #APP */
 2277               	 ;  822 "usb_serial.c" 1
 2278 0098 E491      		lpm r30, Z
 2279               		
 2280               	 ;  0 "" 2
 2281               	.LVL276:
 2282               		.loc 1 822 19 is_stmt 1 view .LVU789
 2283               		.loc 1 822 19 is_stmt 0 view .LVU790
 2284               	/* #NOAPP */
 2285               	.LBE65:
 823:usb_serial.c  **** 				break;
 2286               		.loc 1 823 5 is_stmt 1 view .LVU791
 824:usb_serial.c  **** 			}
 825:usb_serial.c  **** 			len = (wLength < 256) ? wLength : 255;
 2287               		.loc 1 825 4 view .LVU792
 826:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2288               		.loc 1 826 4 view .LVU793
 825:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2289               		.loc 1 825 36 is_stmt 0 view .LVU794
 2290 009a 8F3F      		cpi r24,-1
 2291 009c 9105      		cpc r25,__zero_reg__
 2292 009e 01F0      		breq .L174
 2293 00a0 00F0      		brlo .L174
 2294 00a2 8FEF      		ldi r24,lo8(-1)
 2295 00a4 90E0      		ldi r25,0
 2296               	.LVL277:
 2297               	.L174:
 825:usb_serial.c  **** 			if (len > desc_length) len = desc_length;
 2298               		.loc 1 825 36 view .LVU795
 2299 00a6 E817      		cp r30,r24
 2300 00a8 00F4      		brsh .L175
 2301 00aa 8E2F      		mov r24,r30
 2302               	.L175:
 2303               	.LBB66:
 2304               	.LBB67:
 756:usb_serial.c  **** }
 2305               		.loc 1 756 9 view .LVU796
 2306 00ac 3EEF      		ldi r19,lo8(-2)
 2307               	.LVL278:
 2308               	.L179:
 756:usb_serial.c  **** }
 2309               		.loc 1 756 9 view .LVU797
 2310               	.LBE67:
 2311               	.LBE66:
 827:usb_serial.c  **** 			do {
 2312               		.loc 1 827 4 is_stmt 1 discriminator 1 view .LVU798
 828:usb_serial.c  **** 				// wait for host ready for IN packet
 829:usb_serial.c  **** 				do {
 2313               		.loc 1 829 5 discriminator 1 view .LVU799
 830:usb_serial.c  **** 					i = UEINTX;
 2314               		.loc 1 830 6 discriminator 1 view .LVU800
 2315               		.loc 1 830 8 is_stmt 0 discriminator 1 view .LVU801
 2316 00ae 9091 E800 		lds r25,232
 2317               	.LVL279:
 831:usb_serial.c  **** 				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 2318               		.loc 1 831 5 discriminator 1 view .LVU802
 2319 00b2 292F      		mov r18,r25
 2320 00b4 2570      		andi r18,lo8(5)
 2321 00b6 01F0      		breq .L179
 832:usb_serial.c  **** 				if (i & (1<<RXOUTI)) return;	// abort
 2322               		.loc 1 832 5 is_stmt 1 view .LVU803
 2323               		.loc 1 832 8 is_stmt 0 view .LVU804
 2324 00b8 92FD      		sbrc r25,2
 2325 00ba 00C0      		rjmp .L168
 833:usb_serial.c  **** 				// send IN packet
 834:usb_serial.c  **** 				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 2326               		.loc 1 834 5 is_stmt 1 view .LVU805
 2327               		.loc 1 834 7 is_stmt 0 view .LVU806
 2328 00bc 982F      		mov r25,r24
 2329               	.LVL280:
 2330               		.loc 1 834 7 view .LVU807
 2331 00be 8131      		cpi r24,lo8(17)
 2332 00c0 00F0      		brlo .L181
 2333 00c2 90E1      		ldi r25,lo8(16)
 2334               	.L181:
 2335               	.LVL281:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2336               		.loc 1 835 5 is_stmt 1 view .LVU808
 2337               		.loc 1 835 5 is_stmt 0 view .LVU809
 2338 00c4 FA01      		movw r30,r20
 2339               		.loc 1 835 12 view .LVU810
 2340 00c6 292F      		mov r18,r25
 2341               	.LVL282:
 2342               	.L182:
 2343               		.loc 1 835 5 discriminator 1 view .LVU811
 2344 00c8 2111      		cpse r18,__zero_reg__
 2345 00ca 00C0      		rjmp .L183
 2346               		.loc 1 835 5 discriminator 1 view .LVU812
 2347 00cc 490F      		add r20,r25
 2348 00ce 511D      		adc r21,__zero_reg__
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 837:usb_serial.c  **** 				}
 838:usb_serial.c  **** 				len -= n;
 2349               		.loc 1 838 5 is_stmt 1 view .LVU813
 2350               		.loc 1 838 9 is_stmt 0 view .LVU814
 2351 00d0 E82F      		mov r30,r24
 2352               	.LVL283:
 2353               		.loc 1 838 9 view .LVU815
 2354 00d2 E91B      		sub r30,r25
 2355 00d4 9E2F      		mov r25,r30
 2356               	.LVL284:
 839:usb_serial.c  **** 				usb_send_in();
 2357               		.loc 1 839 5 is_stmt 1 view .LVU816
 2358               	.LBB69:
 2359               	.LBI66:
 754:usb_serial.c  **** {
 2360               		.loc 1 754 20 view .LVU817
 2361               	.LBB68:
 756:usb_serial.c  **** }
 2362               		.loc 1 756 2 view .LVU818
 756:usb_serial.c  **** }
 2363               		.loc 1 756 9 is_stmt 0 view .LVU819
 2364 00d6 3093 E800 		sts 232,r19
 2365               	.LBE68:
 2366               	.LBE69:
 840:usb_serial.c  **** 			} while (len || n == ENDPOINT0_SIZE);
 2367               		.loc 1 840 4 view .LVU820
 2368 00da E111      		cpse r30,__zero_reg__
 2369 00dc 00C0      		rjmp .L184
 2370               		.loc 1 840 17 discriminator 1 view .LVU821
 2371 00de 8031      		cpi r24,lo8(16)
 2372 00e0 00F4      		brsh .L184
 2373               	.LVL285:
 2374               	.L168:
 2375               	/* epilogue start */
 841:usb_serial.c  **** 			return;
 842:usb_serial.c  ****                 }
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 844:usb_serial.c  **** 			usb_send_in();
 845:usb_serial.c  **** 			usb_wait_in_ready();
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 847:usb_serial.c  **** 			return;
 848:usb_serial.c  **** 		}
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 850:usb_serial.c  **** 			usb_configuration = wValue;
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 853:usb_serial.c  **** 			usb_send_in();
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 856:usb_serial.c  **** 				UENUM = i;
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 858:usb_serial.c  **** 				UECONX = en;
 859:usb_serial.c  **** 				if (en) {
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 862:usb_serial.c  **** 				}
 863:usb_serial.c  **** 			}
 864:usb_serial.c  ****         		UERST = 0x1E;
 865:usb_serial.c  ****         		UERST = 0;
 866:usb_serial.c  **** 			return;
 867:usb_serial.c  **** 		}
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 869:usb_serial.c  **** 			usb_wait_in_ready();
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 871:usb_serial.c  **** 			usb_send_in();
 872:usb_serial.c  **** 			return;
 873:usb_serial.c  **** 		}
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 875:usb_serial.c  **** 			usb_wait_in_ready();
 876:usb_serial.c  **** 			p = cdc_line_coding;
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 878:usb_serial.c  **** 				UEDATX = *p++;
 879:usb_serial.c  **** 			}
 880:usb_serial.c  **** 			usb_send_in();
 881:usb_serial.c  **** 			return;
 882:usb_serial.c  **** 		}
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 884:usb_serial.c  **** 			usb_wait_receive_out();
 885:usb_serial.c  **** 			p = cdc_line_coding;
 886:usb_serial.c  **** 			for (i=0; i<7; i++) {
 887:usb_serial.c  **** 				*p++ = UEDATX;
 888:usb_serial.c  **** 			}
 889:usb_serial.c  **** 			usb_ack_out();
 890:usb_serial.c  **** 			usb_send_in();
 891:usb_serial.c  **** 			return;
 892:usb_serial.c  **** 		}
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 895:usb_serial.c  **** 			usb_wait_in_ready();
 896:usb_serial.c  **** 			usb_send_in();
 897:usb_serial.c  **** 			return;
 898:usb_serial.c  **** 		}
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 900:usb_serial.c  **** 			usb_wait_in_ready();
 901:usb_serial.c  **** 			i = 0;
 902:usb_serial.c  **** 			#ifdef SUPPORT_ENDPOINT_HALT
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 904:usb_serial.c  **** 				UENUM = wIndex;
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 906:usb_serial.c  **** 				UENUM = 0;
 907:usb_serial.c  **** 			}
 908:usb_serial.c  **** 			#endif
 909:usb_serial.c  **** 			UEDATX = i;
 910:usb_serial.c  **** 			UEDATX = 0;
 911:usb_serial.c  **** 			usb_send_in();
 912:usb_serial.c  **** 			return;
 913:usb_serial.c  **** 		}
 914:usb_serial.c  **** 		#ifdef SUPPORT_ENDPOINT_HALT
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 919:usb_serial.c  **** 				usb_send_in();
 920:usb_serial.c  **** 				UENUM = i;
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 922:usb_serial.c  **** 					UECONX = (1<<STALLRQ)|(1<<EPEN);
 923:usb_serial.c  **** 				} else {
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 925:usb_serial.c  **** 					UERST = (1 << i);
 926:usb_serial.c  **** 					UERST = 0;
 927:usb_serial.c  **** 				}
 928:usb_serial.c  **** 				return;
 929:usb_serial.c  **** 			}
 930:usb_serial.c  **** 		}
 931:usb_serial.c  **** 		#endif
 932:usb_serial.c  ****         }
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 934:usb_serial.c  **** }...
 2376               		.loc 1 934 1 view .LVU822
 2377 00e2 FF91      		pop r31
 2378 00e4 EF91      		pop r30
 2379 00e6 DF91      		pop r29
 2380 00e8 CF91      		pop r28
 2381 00ea BF91      		pop r27
 2382 00ec AF91      		pop r26
 2383 00ee 9F91      		pop r25
 2384 00f0 8F91      		pop r24
 2385 00f2 7F91      		pop r23
 2386 00f4 6F91      		pop r22
 2387 00f6 5F91      		pop r21
 2388 00f8 4F91      		pop r20
 2389 00fa 3F91      		pop r19
 2390 00fc 2F91      		pop r18
 2391 00fe 1F91      		pop r17
 2392 0100 0F91      		pop r16
 2393 0102 FF90      		pop r15
 2394 0104 EF90      		pop r14
 2395 0106 0F90      		pop r0
 2396 0108 0FBE      		out __SREG__,r0
 2397 010a 0F90      		pop r0
 2398 010c 1F90      		pop r1
 2399 010e 1895      		reti
 2400               	.LVL286:
 2401               	.L173:
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2402               		.loc 1 804 5 is_stmt 1 view .LVU823
 2403 0110 295F      		subi r18,-7
 2404 0112 3F4F      		sbci r19,-1
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2405               		.loc 1 804 8 is_stmt 0 view .LVU824
 2406 0114 40E0      		ldi r20,hi8(descriptor_list+42)
 2407 0116 2030      		cpi r18,lo8(descriptor_list+42)
 2408 0118 3407      		cpc r19,r20
 2409               	.LVL287:
 804:usb_serial.c  **** 				if (i >= NUM_DESC_LIST) {
 2410               		.loc 1 804 8 view .LVU825
 2411 011a 01F0      		breq .+2
 2412 011c 00C0      		rjmp .L178
 2413               	.LVL288:
 2414               	.L169:
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 2415               		.loc 1 933 2 is_stmt 1 view .LVU826
 933:usb_serial.c  **** 	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 2416               		.loc 1 933 9 is_stmt 0 view .LVU827
 2417 011e 81E2      		ldi r24,lo8(33)
 2418 0120 8093 EB00 		sts 235,r24
 2419 0124 00C0      		rjmp .L168
 2420               	.LVL289:
 2421               	.L184:
 774:usb_serial.c  **** {
 2422               		.loc 1 774 1 discriminator 1 view .LVU828
 2423 0126 892F      		mov r24,r25
 2424 0128 00C0      		rjmp .L179
 2425               	.LVL290:
 2426               	.L183:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2427               		.loc 1 836 6 is_stmt 1 discriminator 3 view .LVU829
 2428               	.LBB70:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2429               		.loc 1 836 15 discriminator 3 view .LVU830
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2430               		.loc 1 836 15 discriminator 3 view .LVU831
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2431               		.loc 1 836 15 discriminator 3 view .LVU832
 2432               	/* #APP */
 2433               	 ;  836 "usb_serial.c" 1
 2434 012a 6491      		lpm r22, Z
 2435               		
 2436               	 ;  0 "" 2
 2437               	.LVL291:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2438               		.loc 1 836 15 discriminator 3 view .LVU833
 2439               	/* #NOAPP */
 2440               	.LBE70:
 836:usb_serial.c  **** 					UEDATX = pgm_read_byte(desc_addr++);
 2441               		.loc 1 836 13 is_stmt 0 discriminator 3 view .LVU834
 2442 012c 6093 F100 		sts 241,r22
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2443               		.loc 1 835 21 discriminator 3 view .LVU835
 2444 0130 2150      		subi r18,lo8(-(-1))
 2445               	.LVL292:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2446               		.loc 1 835 21 discriminator 3 view .LVU836
 2447 0132 3196      		adiw r30,1
 2448               	.LVL293:
 835:usb_serial.c  **** 				for (i = n; i; i--) {
 2449               		.loc 1 835 21 discriminator 3 view .LVU837
 2450 0134 00C0      		rjmp .L182
 2451               	.LVL294:
 2452               	.L211:
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 2453               		.loc 1 843 3 is_stmt 1 view .LVU838
 843:usb_serial.c  **** 		if (bRequest == SET_ADDRESS) {
 2454               		.loc 1 843 6 is_stmt 0 view .LVU839
 2455 0136 C530      		cpi r28,lo8(5)
 2456 0138 01F4      		brne .L186
 844:usb_serial.c  **** 			usb_send_in();
 2457               		.loc 1 844 4 is_stmt 1 view .LVU840
 2458               	.LBB71:
 2459               	.LBI71:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2460               		.loc 1 754 20 view .LVU841
 2461               	.LBB72:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2462               		.loc 1 756 2 view .LVU842
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2463               		.loc 1 756 9 is_stmt 0 view .LVU843
 2464 013a 8EEF      		ldi r24,lo8(-2)
 2465               	.LVL295:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2466               		.loc 1 756 9 view .LVU844
 2467 013c 8093 E800 		sts 232,r24
 2468               	.LBE72:
 2469               	.LBE71:
 845:usb_serial.c  **** 			usb_wait_in_ready();
 2470               		.loc 1 845 4 is_stmt 1 view .LVU845
 2471 0140 0E94 0000 		call usb_wait_in_ready
 2472               	.LVL296:
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2473               		.loc 1 846 4 view .LVU846
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2474               		.loc 1 846 20 is_stmt 0 view .LVU847
 2475 0144 8E2D      		mov r24,r14
 2476 0146 8068      		ori r24,lo8(-128)
 846:usb_serial.c  **** 			UDADDR = wValue | (1<<ADDEN);
 2477               		.loc 1 846 11 view .LVU848
 2478 0148 8093 E300 		sts 227,r24
 847:usb_serial.c  **** 			return;
 2479               		.loc 1 847 4 is_stmt 1 view .LVU849
 2480 014c 00C0      		rjmp .L168
 2481               	.LVL297:
 2482               	.L186:
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 2483               		.loc 1 849 3 view .LVU850
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 2484               		.loc 1 849 6 is_stmt 0 view .LVU851
 2485 014e C930      		cpi r28,lo8(9)
 2486 0150 01F4      		brne .L187
 849:usb_serial.c  **** 		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 2487               		.loc 1 849 37 discriminator 1 view .LVU852
 2488 0152 D111      		cpse r29,__zero_reg__
 2489 0154 00C0      		rjmp .L169
 850:usb_serial.c  **** 			usb_configuration = wValue;
 2490               		.loc 1 850 4 is_stmt 1 view .LVU853
 850:usb_serial.c  **** 			usb_configuration = wValue;
 2491               		.loc 1 850 22 is_stmt 0 view .LVU854
 2492 0156 E092 0000 		sts usb_configuration,r14
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 2493               		.loc 1 851 4 is_stmt 1 view .LVU855
 851:usb_serial.c  **** 			cdc_line_rtsdtr = 0;
 2494               		.loc 1 851 20 is_stmt 0 view .LVU856
 2495 015a 1092 0000 		sts cdc_line_rtsdtr,__zero_reg__
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 2496               		.loc 1 852 4 is_stmt 1 view .LVU857
 852:usb_serial.c  **** 			transmit_flush_timer = 0;
 2497               		.loc 1 852 25 is_stmt 0 view .LVU858
 2498 015e 1092 0000 		sts transmit_flush_timer,__zero_reg__
 853:usb_serial.c  **** 			usb_send_in();
 2499               		.loc 1 853 4 is_stmt 1 view .LVU859
 2500               	.LBB73:
 2501               	.LBI73:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2502               		.loc 1 754 20 view .LVU860
 2503               	.LBB74:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2504               		.loc 1 756 2 view .LVU861
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2505               		.loc 1 756 9 is_stmt 0 view .LVU862
 2506 0162 8EEF      		ldi r24,lo8(-2)
 2507               	.LVL298:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2508               		.loc 1 756 9 view .LVU863
 2509 0164 8093 E800 		sts 232,r24
 2510               	.LBE74:
 2511               	.LBE73:
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 2512               		.loc 1 854 4 is_stmt 1 view .LVU864
 2513               	.LVL299:
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2514               		.loc 1 855 4 view .LVU865
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2515               		.loc 1 855 10 is_stmt 0 view .LVU866
 2516 0168 21E0      		ldi r18,lo8(1)
 854:usb_serial.c  **** 			cfg = endpoint_config_table;
 2517               		.loc 1 854 8 view .LVU867
 2518 016a 80E0      		ldi r24,lo8(endpoint_config_table)
 2519 016c 90E0      		ldi r25,hi8(endpoint_config_table)
 2520               	.LVL300:
 2521               	.L189:
 856:usb_serial.c  **** 				UENUM = i;
 2522               		.loc 1 856 5 is_stmt 1 view .LVU868
 856:usb_serial.c  **** 				UENUM = i;
 2523               		.loc 1 856 11 is_stmt 0 view .LVU869
 2524 016e 2093 E900 		sts 233,r18
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2525               		.loc 1 857 5 is_stmt 1 view .LVU870
 2526               	.LBB75:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2527               		.loc 1 857 10 view .LVU871
 2528 0172 AC01      		movw r20,r24
 2529 0174 4F5F      		subi r20,-1
 2530 0176 5F4F      		sbci r21,-1
 2531               	.LVL301:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2532               		.loc 1 857 10 view .LVU872
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2533               		.loc 1 857 10 view .LVU873
 2534 0178 FC01      		movw r30,r24
 2535               	/* #APP */
 2536               	 ;  857 "usb_serial.c" 1
 2537 017a 3491      		lpm r19, Z
 2538               		
 2539               	 ;  0 "" 2
 2540               	.LVL302:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2541               		.loc 1 857 10 view .LVU874
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2542               		.loc 1 857 10 is_stmt 0 view .LVU875
 2543               	/* #NOAPP */
 2544               	.LBE75:
 858:usb_serial.c  **** 				UECONX = en;
 2545               		.loc 1 858 5 is_stmt 1 view .LVU876
 858:usb_serial.c  **** 				UECONX = en;
 2546               		.loc 1 858 12 is_stmt 0 view .LVU877
 2547 017c 3093 EB00 		sts 235,r19
 859:usb_serial.c  **** 				if (en) {
 2548               		.loc 1 859 5 is_stmt 1 view .LVU878
 859:usb_serial.c  **** 				if (en) {
 2549               		.loc 1 859 8 is_stmt 0 view .LVU879
 2550 0180 3323      		tst r19
 2551 0182 01F0      		breq .L200
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2552               		.loc 1 860 6 is_stmt 1 view .LVU880
 2553               	.LBB76:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2554               		.loc 1 860 16 view .LVU881
 2555               	.LVL303:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2556               		.loc 1 860 16 view .LVU882
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2557               		.loc 1 860 16 view .LVU883
 2558 0184 FA01      		movw r30,r20
 2559               	/* #APP */
 2560               	 ;  860 "usb_serial.c" 1
 2561 0186 4491      		lpm r20, Z
 2562               		
 2563               	 ;  0 "" 2
 2564               	.LVL304:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2565               		.loc 1 860 16 view .LVU884
 2566               	/* #NOAPP */
 2567               	.LBE76:
 860:usb_serial.c  **** 					UECFG0X = pgm_read_byte(cfg++);
 2568               		.loc 1 860 14 is_stmt 0 view .LVU885
 2569 0188 4093 EC00 		sts 236,r20
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2570               		.loc 1 861 6 is_stmt 1 view .LVU886
 2571               	.LBB77:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2572               		.loc 1 861 16 view .LVU887
 2573               	.LVL305:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2574               		.loc 1 861 16 view .LVU888
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2575               		.loc 1 861 16 view .LVU889
 2576 018c 3196      		adiw r30,1
 2577               	.LVL306:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2578               		.loc 1 861 16 is_stmt 0 view .LVU890
 2579               	/* #APP */
 2580               	 ;  861 "usb_serial.c" 1
 2581 018e E491      		lpm r30, Z
 2582               		
 2583               	 ;  0 "" 2
 2584               	.LVL307:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2585               		.loc 1 861 16 view .LVU891
 2586               	/* #NOAPP */
 2587 0190 0396      		adiw r24,3
 2588               	.LVL308:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2589               		.loc 1 861 16 is_stmt 1 view .LVU892
 2590               	.LBE77:
 861:usb_serial.c  **** 					UECFG1X = pgm_read_byte(cfg++);
 2591               		.loc 1 861 14 is_stmt 0 view .LVU893
 2592 0192 E093 ED00 		sts 237,r30
 2593               	.LVL309:
 2594               	.L188:
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2595               		.loc 1 855 20 discriminator 2 view .LVU894
 2596 0196 2F5F      		subi r18,lo8(-(1))
 2597               	.LVL310:
 855:usb_serial.c  **** 			for (i=1; i<5; i++) {
 2598               		.loc 1 855 4 discriminator 2 view .LVU895
 2599 0198 2530      		cpi r18,lo8(5)
 2600 019a 01F4      		brne .L189
 864:usb_serial.c  ****         		UERST = 0x1E;
 2601               		.loc 1 864 11 is_stmt 1 view .LVU896
 864:usb_serial.c  ****         		UERST = 0x1E;
 2602               		.loc 1 864 17 is_stmt 0 view .LVU897
 2603 019c 8EE1      		ldi r24,lo8(30)
 2604               	.LVL311:
 2605               	.L212:
 925:usb_serial.c  **** 					UERST = (1 << i);
 2606               		.loc 1 925 12 view .LVU898
 2607 019e 8093 EA00 		sts 234,r24
 926:usb_serial.c  **** 					UERST = 0;
 2608               		.loc 1 926 6 is_stmt 1 view .LVU899
 926:usb_serial.c  **** 					UERST = 0;
 2609               		.loc 1 926 12 is_stmt 0 view .LVU900
 2610 01a2 1092 EA00 		sts 234,__zero_reg__
 2611 01a6 00C0      		rjmp .L168
 2612               	.LVL312:
 2613               	.L200:
 2614               	.LBB78:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2615               		.loc 1 857 10 view .LVU901
 2616 01a8 CA01      		movw r24,r20
 2617               	.LVL313:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2618               		.loc 1 857 10 view .LVU902
 2619 01aa 00C0      		rjmp .L188
 2620               	.LVL314:
 2621               	.L187:
 857:usb_serial.c  **** 				en = pgm_read_byte(cfg++);
 2622               		.loc 1 857 10 view .LVU903
 2623               	.LBE78:
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 2624               		.loc 1 868 3 is_stmt 1 view .LVU904
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 2625               		.loc 1 868 6 is_stmt 0 view .LVU905
 2626 01ac C830      		cpi r28,lo8(8)
 2627 01ae 01F4      		brne .L190
 868:usb_serial.c  **** 		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 2628               		.loc 1 868 37 discriminator 1 view .LVU906
 2629 01b0 D038      		cpi r29,lo8(-128)
 2630 01b2 01F0      		breq .+2
 2631 01b4 00C0      		rjmp .L169
 869:usb_serial.c  **** 			usb_wait_in_ready();
 2632               		.loc 1 869 4 is_stmt 1 view .LVU907
 2633 01b6 0E94 0000 		call usb_wait_in_ready
 2634               	.LVL315:
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 2635               		.loc 1 870 4 view .LVU908
 870:usb_serial.c  **** 			UEDATX = usb_configuration;
 2636               		.loc 1 870 11 is_stmt 0 view .LVU909
 2637 01ba 8091 0000 		lds r24,usb_configuration
 2638 01be 8093 F100 		sts 241,r24
 871:usb_serial.c  **** 			usb_send_in();
 2639               		.loc 1 871 4 is_stmt 1 view .LVU910
 2640               	.LBB79:
 2641               	.LBI79:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2642               		.loc 1 754 20 view .LVU911
 2643               	.LBB80:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2644               		.loc 1 756 2 view .LVU912
 2645               	.LVL316:
 2646               	.L213:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2647               		.loc 1 756 2 is_stmt 0 view .LVU913
 2648               	.LBE80:
 2649               	.LBE79:
 911:usb_serial.c  **** 			usb_send_in();
 2650               		.loc 1 911 4 is_stmt 1 view .LVU914
 2651               	.LBB81:
 2652               	.LBI81:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2653               		.loc 1 754 20 view .LVU915
 2654               	.LBB82:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2655               		.loc 1 756 2 view .LVU916
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2656               		.loc 1 756 9 is_stmt 0 view .LVU917
 2657 01c2 8EEF      		ldi r24,lo8(-2)
 2658 01c4 8093 E800 		sts 232,r24
 2659               	.LBE82:
 2660               	.LBE81:
 912:usb_serial.c  **** 			return;
 2661               		.loc 1 912 4 is_stmt 1 view .LVU918
 2662 01c8 00C0      		rjmp .L168
 2663               	.LVL317:
 2664               	.L190:
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 2665               		.loc 1 874 3 view .LVU919
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 2666               		.loc 1 874 6 is_stmt 0 view .LVU920
 2667 01ca C132      		cpi r28,lo8(33)
 2668 01cc 01F4      		brne .L191
 874:usb_serial.c  **** 		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 2669               		.loc 1 874 39 discriminator 1 view .LVU921
 2670 01ce D13A      		cpi r29,lo8(-95)
 2671 01d0 01F0      		breq .+2
 2672 01d2 00C0      		rjmp .L169
 875:usb_serial.c  **** 			usb_wait_in_ready();
 2673               		.loc 1 875 4 is_stmt 1 view .LVU922
 2674 01d4 0E94 0000 		call usb_wait_in_ready
 2675               	.LVL318:
 876:usb_serial.c  **** 			p = cdc_line_coding;
 2676               		.loc 1 876 4 view .LVU923
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2677               		.loc 1 877 4 view .LVU924
 876:usb_serial.c  **** 			p = cdc_line_coding;
 2678               		.loc 1 876 6 is_stmt 0 view .LVU925
 2679 01d8 80E0      		ldi r24,lo8(cdc_line_coding)
 2680 01da 90E0      		ldi r25,hi8(cdc_line_coding)
 2681               	.LVL319:
 2682               	.L192:
 878:usb_serial.c  **** 				UEDATX = *p++;
 2683               		.loc 1 878 5 is_stmt 1 discriminator 3 view .LVU926
 878:usb_serial.c  **** 				UEDATX = *p++;
 2684               		.loc 1 878 14 is_stmt 0 discriminator 3 view .LVU927
 2685 01dc FC01      		movw r30,r24
 2686 01de 2191      		ld r18,Z+
 2687 01e0 CF01      		movw r24,r30
 2688               	.LVL320:
 878:usb_serial.c  **** 				UEDATX = *p++;
 2689               		.loc 1 878 12 discriminator 3 view .LVU928
 2690 01e2 2093 F100 		sts 241,r18
 2691               	.LVL321:
 877:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2692               		.loc 1 877 4 discriminator 3 view .LVU929
 2693 01e6 F0E0      		ldi r31,hi8(cdc_line_coding+7)
 2694 01e8 8030      		cpi r24,lo8(cdc_line_coding+7)
 2695 01ea 9F07      		cpc r25,r31
 2696 01ec 01F4      		brne .L192
 2697 01ee 00C0      		rjmp .L213
 2698               	.LVL322:
 2699               	.L191:
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 2700               		.loc 1 883 3 is_stmt 1 view .LVU930
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 2701               		.loc 1 883 6 is_stmt 0 view .LVU931
 2702 01f0 C032      		cpi r28,lo8(32)
 2703 01f2 01F4      		brne .L193
 883:usb_serial.c  **** 		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 2704               		.loc 1 883 39 discriminator 1 view .LVU932
 2705 01f4 D132      		cpi r29,lo8(33)
 2706 01f6 01F0      		breq .+2
 2707 01f8 00C0      		rjmp .L169
 2708               	.LVL323:
 2709               	.L194:
 2710               	.LBB83:
 2711               	.LBB84:
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 2712               		.loc 1 760 34 is_stmt 1 view .LVU933
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 2713               		.loc 1 760 11 is_stmt 0 view .LVU934
 2714 01fa 8091 E800 		lds r24,232
 760:usb_serial.c  **** 	while (!(UEINTX & (1<<RXOUTI))) ;
 2715               		.loc 1 760 8 view .LVU935
 2716 01fe 82FF      		sbrs r24,2
 2717 0200 00C0      		rjmp .L194
 2718               	.LBE84:
 2719               	.LBE83:
 885:usb_serial.c  **** 			p = cdc_line_coding;
 2720               		.loc 1 885 6 view .LVU936
 2721 0202 80E0      		ldi r24,lo8(cdc_line_coding)
 2722 0204 90E0      		ldi r25,hi8(cdc_line_coding)
 2723               	.L195:
 2724               	.LVL324:
 887:usb_serial.c  **** 				*p++ = UEDATX;
 2725               		.loc 1 887 5 is_stmt 1 discriminator 3 view .LVU937
 887:usb_serial.c  **** 				*p++ = UEDATX;
 2726               		.loc 1 887 12 is_stmt 0 discriminator 3 view .LVU938
 2727 0206 2091 F100 		lds r18,241
 887:usb_serial.c  **** 				*p++ = UEDATX;
 2728               		.loc 1 887 10 discriminator 3 view .LVU939
 2729 020a FC01      		movw r30,r24
 2730 020c 2193      		st Z+,r18
 2731 020e CF01      		movw r24,r30
 2732               	.LVL325:
 886:usb_serial.c  **** 			for (i=0; i<7; i++) {
 2733               		.loc 1 886 4 discriminator 3 view .LVU940
 2734 0210 F0E0      		ldi r31,hi8(cdc_line_coding+7)
 2735 0212 8030      		cpi r24,lo8(cdc_line_coding+7)
 2736 0214 9F07      		cpc r25,r31
 2737 0216 01F4      		brne .L195
 889:usb_serial.c  **** 			usb_ack_out();
 2738               		.loc 1 889 4 is_stmt 1 view .LVU941
 2739               	.LBB85:
 2740               	.LBI85:
 762:usb_serial.c  **** static inline void usb_ack_out(void)
 2741               		.loc 1 762 20 view .LVU942
 2742               	.LBB86:
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 2743               		.loc 1 764 2 view .LVU943
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 2744               		.loc 1 764 9 is_stmt 0 view .LVU944
 2745 0218 8BEF      		ldi r24,lo8(-5)
 2746               	.LVL326:
 764:usb_serial.c  **** 	UEINTX = ~(1<<RXOUTI);
 2747               		.loc 1 764 9 view .LVU945
 2748 021a 8093 E800 		sts 232,r24
 2749               	.LBE86:
 2750               	.LBE85:
 890:usb_serial.c  **** 			usb_send_in();
 2751               		.loc 1 890 4 is_stmt 1 view .LVU946
 2752               	.LBB87:
 2753               	.LBI87:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2754               		.loc 1 754 20 view .LVU947
 2755               	.LBB88:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2756               		.loc 1 756 2 view .LVU948
 2757 021e 00C0      		rjmp .L213
 2758               	.LVL327:
 2759               	.L193:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2760               		.loc 1 756 2 is_stmt 0 view .LVU949
 2761               	.LBE88:
 2762               	.LBE87:
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 2763               		.loc 1 893 3 is_stmt 1 view .LVU950
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 2764               		.loc 1 893 6 is_stmt 0 view .LVU951
 2765 0220 C232      		cpi r28,lo8(34)
 2766 0222 01F4      		brne .L196
 893:usb_serial.c  **** 		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 2767               		.loc 1 893 46 discriminator 1 view .LVU952
 2768 0224 D132      		cpi r29,lo8(33)
 2769 0226 01F0      		breq .+2
 2770 0228 00C0      		rjmp .L169
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2771               		.loc 1 894 4 is_stmt 1 view .LVU953
 894:usb_serial.c  **** 			cdc_line_rtsdtr = wValue;
 2772               		.loc 1 894 20 is_stmt 0 view .LVU954
 2773 022a E092 0000 		sts cdc_line_rtsdtr,r14
 895:usb_serial.c  **** 			usb_wait_in_ready();
 2774               		.loc 1 895 4 is_stmt 1 view .LVU955
 2775 022e 0E94 0000 		call usb_wait_in_ready
 2776               	.LVL328:
 896:usb_serial.c  **** 			usb_send_in();
 2777               		.loc 1 896 4 view .LVU956
 2778               	.LBB89:
 2779               	.LBI89:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2780               		.loc 1 754 20 view .LVU957
 2781               	.LBB90:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2782               		.loc 1 756 2 view .LVU958
 2783 0232 00C0      		rjmp .L213
 2784               	.LVL329:
 2785               	.L196:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2786               		.loc 1 756 2 is_stmt 0 view .LVU959
 2787               	.LBE90:
 2788               	.LBE89:
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 2789               		.loc 1 899 3 is_stmt 1 view .LVU960
 899:usb_serial.c  **** 		if (bRequest == GET_STATUS) {
 2790               		.loc 1 899 6 is_stmt 0 view .LVU961
 2791 0234 C111      		cpse r28,__zero_reg__
 2792 0236 00C0      		rjmp .L197
 900:usb_serial.c  **** 			usb_wait_in_ready();
 2793               		.loc 1 900 4 is_stmt 1 view .LVU962
 2794 0238 0E94 0000 		call usb_wait_in_ready
 2795               	.LVL330:
 901:usb_serial.c  **** 			i = 0;
 2796               		.loc 1 901 4 view .LVU963
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 2797               		.loc 1 903 4 view .LVU964
 903:usb_serial.c  **** 			if (bmRequestType == 0x82) {
 2798               		.loc 1 903 7 is_stmt 0 view .LVU965
 2799 023c D238      		cpi r29,lo8(-126)
 2800 023e 01F4      		brne .L198
 904:usb_serial.c  **** 				UENUM = wIndex;
 2801               		.loc 1 904 5 is_stmt 1 view .LVU966
 904:usb_serial.c  **** 				UENUM = wIndex;
 2802               		.loc 1 904 11 is_stmt 0 view .LVU967
 2803 0240 0093 E900 		sts 233,r16
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2804               		.loc 1 905 5 is_stmt 1 view .LVU968
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2805               		.loc 1 905 9 is_stmt 0 view .LVU969
 2806 0244 C091 EB00 		lds r28,235
 2807               	.LVL331:
 905:usb_serial.c  **** 				if (UECONX & (1<<STALLRQ)) i = 1;
 2808               		.loc 1 905 8 view .LVU970
 2809 0248 C5FB      		bst r28,5
 2810 024a CC27      		clr r28
 2811 024c C0F9      		bld r28,0
 2812               	.LVL332:
 906:usb_serial.c  **** 				UENUM = 0;
 2813               		.loc 1 906 5 is_stmt 1 view .LVU971
 906:usb_serial.c  **** 				UENUM = 0;
 2814               		.loc 1 906 11 is_stmt 0 view .LVU972
 2815 024e 1092 E900 		sts 233,__zero_reg__
 2816               	.LVL333:
 2817               	.L198:
 909:usb_serial.c  **** 			UEDATX = i;
 2818               		.loc 1 909 4 is_stmt 1 view .LVU973
 909:usb_serial.c  **** 			UEDATX = i;
 2819               		.loc 1 909 11 is_stmt 0 view .LVU974
 2820 0252 C093 F100 		sts 241,r28
 910:usb_serial.c  **** 			UEDATX = 0;
 2821               		.loc 1 910 4 is_stmt 1 view .LVU975
 910:usb_serial.c  **** 			UEDATX = 0;
 2822               		.loc 1 910 11 is_stmt 0 view .LVU976
 2823 0256 1092 F100 		sts 241,__zero_reg__
 2824 025a 00C0      		rjmp .L213
 2825               	.LVL334:
 2826               	.L197:
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 2827               		.loc 1 915 3 is_stmt 1 view .LVU977
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 2828               		.loc 1 915 6 is_stmt 0 view .LVU978
 2829 025c 8C2F      		mov r24,r28
 2830               	.LVL335:
 915:usb_serial.c  **** 		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 2831               		.loc 1 915 6 view .LVU979
 2832 025e 8D7F      		andi r24,lo8(-3)
 2833 0260 8130      		cpi r24,lo8(1)
 2834 0262 01F0      		breq .+2
 2835 0264 00C0      		rjmp .L169
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 2836               		.loc 1 916 5 view .LVU980
 2837 0266 D230      		cpi r29,lo8(2)
 2838 0268 01F0      		breq .+2
 2839 026a 00C0      		rjmp .L169
 916:usb_serial.c  **** 		  && bmRequestType == 0x02 && wValue == 0) {
 2840               		.loc 1 916 30 discriminator 1 view .LVU981
 2841 026c EF28      		or r14,r15
 2842 026e 01F0      		breq .+2
 2843 0270 00C0      		rjmp .L169
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 2844               		.loc 1 917 4 is_stmt 1 view .LVU982
 917:usb_serial.c  **** 			i = wIndex & 0x7F;
 2845               		.loc 1 917 6 is_stmt 0 view .LVU983
 2846 0272 0F77      		andi r16,lo8(127)
 2847               	.LVL336:
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2848               		.loc 1 918 4 is_stmt 1 view .LVU984
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2849               		.loc 1 918 15 is_stmt 0 view .LVU985
 2850 0274 8FEF      		ldi r24,lo8(-1)
 2851 0276 800F      		add r24,r16
 918:usb_serial.c  **** 			if (i >= 1 && i <= MAX_ENDPOINT) {
 2852               		.loc 1 918 7 view .LVU986
 2853 0278 8430      		cpi r24,lo8(4)
 2854 027a 00F0      		brlo .+2
 2855 027c 00C0      		rjmp .L169
 919:usb_serial.c  **** 				usb_send_in();
 2856               		.loc 1 919 5 is_stmt 1 view .LVU987
 2857               	.LBB91:
 2858               	.LBI91:
 754:usb_serial.c  **** static inline void usb_send_in(void)
 2859               		.loc 1 754 20 view .LVU988
 2860               	.LBB92:
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2861               		.loc 1 756 2 view .LVU989
 756:usb_serial.c  **** 	UEINTX = ~(1<<TXINI);
 2862               		.loc 1 756 9 is_stmt 0 view .LVU990
 2863 027e 8EEF      		ldi r24,lo8(-2)
 2864 0280 8093 E800 		sts 232,r24
 2865               	.LBE92:
 2866               	.LBE91:
 920:usb_serial.c  **** 				UENUM = i;
 2867               		.loc 1 920 5 is_stmt 1 view .LVU991
 920:usb_serial.c  **** 				UENUM = i;
 2868               		.loc 1 920 11 is_stmt 0 view .LVU992
 2869 0284 0093 E900 		sts 233,r16
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 2870               		.loc 1 921 5 is_stmt 1 view .LVU993
 921:usb_serial.c  **** 				if (bRequest == SET_FEATURE) {
 2871               		.loc 1 921 8 is_stmt 0 view .LVU994
 2872 0288 C330      		cpi r28,lo8(3)
 2873 028a 01F4      		brne .+2
 2874 028c 00C0      		rjmp .L169
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 2875               		.loc 1 924 6 is_stmt 1 view .LVU995
 924:usb_serial.c  **** 					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 2876               		.loc 1 924 13 is_stmt 0 view .LVU996
 2877 028e 89E1      		ldi r24,lo8(25)
 2878 0290 8093 EB00 		sts 235,r24
 925:usb_serial.c  **** 					UERST = (1 << i);
 2879               		.loc 1 925 6 is_stmt 1 view .LVU997
 925:usb_serial.c  **** 					UERST = (1 << i);
 2880               		.loc 1 925 17 is_stmt 0 view .LVU998
 2881 0294 81E0      		ldi r24,lo8(1)
 2882 0296 90E0      		ldi r25,0
 2883 0298 00C0      		rjmp 2f
 2884               		1:
 2885 029a 880F      		lsl r24
 2886               		2:
 2887 029c 0A95      		dec r16
 2888 029e 02F4      		brpl 1b
 2889 02a0 00C0      		rjmp .L212
 2890               		.cfi_endproc
 2891               	.LFE21:
 2893               		.local	cdc_line_rtsdtr
 2894               		.comm	cdc_line_rtsdtr,1,1
 2895               		.data
 2898               	cdc_line_coding:
 2899 0000 00        		.byte	0
 2900 0001 E1        		.byte	-31
 2901 0002 00        		.byte	0
 2902 0003 00        		.byte	0
 2903 0004 00        		.byte	0
 2904 0005 00        		.byte	0
 2905 0006 08        		.byte	8
 2906               		.local	transmit_previous_timeout
 2907               		.comm	transmit_previous_timeout,1,1
 2908               		.local	transmit_flush_timer
 2909               		.comm	transmit_flush_timer,1,1
 2910               		.local	usb_configuration
 2911               		.comm	usb_configuration,1,1
 2912               		.section	.progmem.data,"a",@progbits
 2915               	descriptor_list:
 2916 0000 0001      		.word	256
 2917 0002 0000      		.word	0
 2918 0004 0000      		.word	device_descriptor
 2919 0006 12        		.byte	18
 2920 0007 0002      		.word	512
 2921 0009 0000      		.word	0
 2922 000b 0000      		.word	config1_descriptor
 2923 000d 43        		.byte	67
 2924 000e 0003      		.word	768
 2925 0010 0000      		.word	0
 2926 0012 0000      		.word	string0
 2927 0014 04        		.byte	4
 2928 0015 0103      		.word	769
 2929 0017 0904      		.word	1033
 2930 0019 0000      		.word	string1
 2931 001b 14        		.byte	20
 2932 001c 0203      		.word	770
 2933 001e 0904      		.word	1033
 2934 0020 0000      		.word	string2
 2935 0022 16        		.byte	22
 2936 0023 0303      		.word	771
 2937 0025 0904      		.word	1033
 2938 0027 0000      		.word	string3
 2939 0029 0C        		.byte	12
 2942               	string3:
 2943 002a 0C        		.byte	12
 2944 002b 03        		.byte	3
 2945 002c 3100      		.string	"1"
 2946 002e 3200      		.string	"2"
 2947 0030 3300      		.string	"3"
 2948 0032 3400      		.string	"4"
 2949 0034 3500      		.string	"5"
 2950 0036 00        		.string	""
 2951 0037 00        		.string	""
 2954               	string2:
 2955 0038 16        		.byte	22
 2956 0039 03        		.byte	3
 2957 003a 5500      		.string	"U"
 2958 003c 5300      		.string	"S"
 2959 003e 4200      		.string	"B"
 2960 0040 2000      		.string	" "
 2961 0042 5300      		.string	"S"
 2962 0044 6500      		.string	"e"
 2963 0046 7200      		.string	"r"
 2964 0048 6900      		.string	"i"
 2965 004a 6100      		.string	"a"
 2966 004c 6C00      		.string	"l"
 2967 004e 00        		.string	""
 2968 004f 00        		.string	""
 2971               	string1:
 2972 0050 14        		.byte	20
 2973 0051 03        		.byte	3
 2974 0052 5900      		.string	"Y"
 2975 0054 6F00      		.string	"o"
 2976 0056 7500      		.string	"u"
 2977 0058 7200      		.string	"r"
 2978 005a 2000      		.string	" "
 2979 005c 4E00      		.string	"N"
 2980 005e 6100      		.string	"a"
 2981 0060 6D00      		.string	"m"
 2982 0062 6500      		.string	"e"
 2983 0064 00        		.string	""
 2984 0065 00        		.string	""
 2987               	string0:
 2988 0066 04        		.byte	4
 2989 0067 03        		.byte	3
 2990 0068 0904      		.word	1033
 2993               	config1_descriptor:
 2994 006a 09        		.byte	9
 2995 006b 02        		.byte	2
 2996 006c 43        		.byte	67
 2997 006d 00        		.byte	0
 2998 006e 02        		.byte	2
 2999 006f 01        		.byte	1
 3000 0070 00        		.byte	0
 3001 0071 C0        		.byte	-64
 3002 0072 32        		.byte	50
 3003 0073 09        		.byte	9
 3004 0074 04        		.byte	4
 3005 0075 00        		.byte	0
 3006 0076 00        		.byte	0
 3007 0077 01        		.byte	1
 3008 0078 02        		.byte	2
 3009 0079 02        		.byte	2
 3010 007a 01        		.byte	1
 3011 007b 00        		.byte	0
 3012 007c 05        		.byte	5
 3013 007d 24        		.byte	36
 3014 007e 00        		.byte	0
 3015 007f 10        		.byte	16
 3016 0080 01        		.byte	1
 3017 0081 05        		.byte	5
 3018 0082 24        		.byte	36
 3019 0083 01        		.byte	1
 3020 0084 01        		.byte	1
 3021 0085 01        		.byte	1
 3022 0086 04        		.byte	4
 3023 0087 24        		.byte	36
 3024 0088 02        		.byte	2
 3025 0089 06        		.byte	6
 3026 008a 05        		.byte	5
 3027 008b 24        		.byte	36
 3028 008c 06        		.byte	6
 3029 008d 00        		.byte	0
 3030 008e 01        		.byte	1
 3031 008f 07        		.byte	7
 3032 0090 05        		.byte	5
 3033 0091 82        		.byte	-126
 3034 0092 03        		.byte	3
 3035 0093 10        		.byte	16
 3036 0094 00        		.byte	0
 3037 0095 40        		.byte	64
 3038 0096 09        		.byte	9
 3039 0097 04        		.byte	4
 3040 0098 01        		.byte	1
 3041 0099 00        		.byte	0
 3042 009a 02        		.byte	2
 3043 009b 0A        		.byte	10
 3044 009c 00        		.byte	0
 3045 009d 00        		.byte	0
 3046 009e 00        		.byte	0
 3047 009f 07        		.byte	7
 3048 00a0 05        		.byte	5
 3049 00a1 03        		.byte	3
 3050 00a2 02        		.byte	2
 3051 00a3 40        		.byte	64
 3052 00a4 00        		.byte	0
 3053 00a5 00        		.byte	0
 3054 00a6 07        		.byte	7
 3055 00a7 05        		.byte	5
 3056 00a8 84        		.byte	-124
 3057 00a9 02        		.byte	2
 3058 00aa 40        		.byte	64
 3059 00ab 00        		.byte	0
 3060 00ac 00        		.byte	0
 3063               	device_descriptor:
 3064 00ad 12        		.byte	18
 3065 00ae 01        		.byte	1
 3066 00af 00        		.byte	0
 3067 00b0 02        		.byte	2
 3068 00b1 02        		.byte	2
 3069 00b2 00        		.byte	0
 3070 00b3 00        		.byte	0
 3071 00b4 10        		.byte	16
 3072 00b5 C0        		.byte	-64
 3073 00b6 16        		.byte	22
 3074 00b7 7A        		.byte	122
 3075 00b8 04        		.byte	4
 3076 00b9 00        		.byte	0
 3077 00ba 01        		.byte	1
 3078 00bb 01        		.byte	1
 3079 00bc 02        		.byte	2
 3080 00bd 03        		.byte	3
 3081 00be 01        		.byte	1
 3084               	endpoint_config_table:
 3085 00bf 00        		.byte	0
 3086 00c0 01        		.byte	1
 3087 00c1 C1        		.byte	-63
 3088 00c2 12        		.byte	18
 3089 00c3 01        		.byte	1
 3090 00c4 80        		.byte	-128
 3091 00c5 36        		.byte	54
 3092 00c6 01        		.byte	1
 3093 00c7 81        		.byte	-127
 3094 00c8 36        		.byte	54
 3095               		.text
 3096               	.Letext0:
 3097               		.file 2 "/usr/local/Cellar/avr-gcc/8.3.0/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 usb_serial.c
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:4      *ABS*:000000000000003f __SREG__
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:12     .text.usb_wait_in_ready:0000000000000000 usb_wait_in_ready
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:37     .text.usb_init:0000000000000000 usb_init
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2909   .bss:0000000000000003 usb_configuration
                             .bss:0000000000000000 cdc_line_rtsdtr
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:92     .text.usb_configured:0000000000000000 usb_configured
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:112    .text.usb_serial_getchar:0000000000000000 usb_serial_getchar
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:203    .text.usb_serial_available:0000000000000000 usb_serial_available
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:284    .text.usb_serial_flush_input:0000000000000000 usb_serial_flush_input
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:342    .text.usb_serial_putchar:0000000000000000 usb_serial_putchar
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2894   .bss:0000000000000001 transmit_previous_timeout
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2907   .bss:0000000000000002 transmit_flush_timer
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:494    .text.usb_serial_putchar_nowait:0000000000000000 usb_serial_putchar_nowait
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:577    .text.usb_serial_write:0000000000000000 usb_serial_write
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1672   .text.usb_serial_flush_output:0000000000000000 usb_serial_flush_output
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1721   .text.usb_serial_get_baud:0000000000000000 usb_serial_get_baud
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2898   .data:0000000000000000 cdc_line_coding
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1744   .text.usb_serial_get_stopbits:0000000000000000 usb_serial_get_stopbits
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1763   .text.usb_serial_get_paritytype:0000000000000000 usb_serial_get_paritytype
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1782   .text.usb_serial_get_numbits:0000000000000000 usb_serial_get_numbits
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1801   .text.usb_serial_get_control:0000000000000000 usb_serial_get_control
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1820   .text.usb_serial_set_control:0000000000000000 usb_serial_set_control
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:1920   .text.__vector_10:0000000000000000 __vector_10
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.001
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2023   .text.__vector_11:0000000000000000 __vector_11
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2915   .progmem.data:0000000000000000 descriptor_list
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:3084   .progmem.data:00000000000000bf endpoint_config_table
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:3063   .progmem.data:00000000000000ad device_descriptor
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2993   .progmem.data:000000000000006a config1_descriptor
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2987   .progmem.data:0000000000000066 string0
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2971   .progmem.data:0000000000000050 string1
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2954   .progmem.data:0000000000000038 string2
/var/folders/v0/yd_zlz_14_d9_058zhfm2_gm0000gn/T//cc3VBXKt.s:2942   .progmem.data:000000000000002a string3

UNDEFINED SYMBOLS
__tablejump2__
__do_copy_data
__do_clear_bss
